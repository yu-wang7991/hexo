{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/2.jpg","path":"images/2.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/next/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/arrow-left.svg","path":"images/arrow-left.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/arrow-right.svg","path":"images/arrow-right.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/github.svg","path":"images/github.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/mail.svg","path":"images/mail.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/menu.svg","path":"images/menu.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/twitter.svg","path":"images/twitter.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/weibo.svg","path":"images/weibo.svg","modified":1,"renderable":1},{"_id":"source/images/3.jpg","path":"images/3.jpg","modified":1,"renderable":0},{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"b913e1d37eaed1d1fa645c47ce1ea05ae856b03e","modified":1745373358922},{"_id":"themes/next/.DS_Store","hash":"d3bd684e2e08be2bb4ccc367b3d7ff0b50d8c69e","modified":1745372601436},{"_id":"themes/next/LICENSE","hash":"9cc3d3b0d43454286f367d5c278a8176555f4b8d","modified":1641049296726},{"_id":"themes/next/README.md","hash":"8785c0097180fbeadcd8eba00692029947b3e882","modified":1641049296727},{"_id":"themes/next/_config.yml","hash":"181cbe1cd374f77ded1ff0bccd1664f23e0611ff","modified":1641049296727},{"_id":"source/_posts/.DS_Store","hash":"a864d547d19a2bbce7e32b7729f6994515a4b2a2","modified":1745372779528},{"_id":"source/_posts/js常用方法.md","hash":"3084a88cfe71e5a355c5c3116baad63cfc90d228","modified":1745373669331},{"_id":"source/_posts/简历.md","hash":"29f8462d66bd26f9e245df6eb52b574fdcba33a0","modified":1745373611828},{"_id":"source/_posts/vue.md","hash":"f341b3777824b2edd5c5028084028a63e426fd0f","modified":1745373688018},{"_id":"themes/next/docs/Changelog.md","hash":"fd495d6fea47ad3e6058c8f4369334ed31b54928","modified":1641049296728},{"_id":"themes/next/docs/Hexo-Post-template.md","hash":"2daa1d28ba3cb132728fc27b170d8db897c55f16","modified":1641049296728},{"_id":"themes/next/docs/Home.md","hash":"518452bd8b8c23ac8907d25ef1f706ebccb37ca0","modified":1641049296728},{"_id":"themes/next/docs/PreviewPhoto_首页预览图.md","hash":"5227892f22080c50c1561a2bc07b246f27825761","modified":1641049296729},{"_id":"themes/next/docs/Todo.md","hash":"5519f0fb63fd41b1672733e6087faa70604a99b8","modified":1641049296729},{"_id":"themes/next/docs/analytics_访问统计.md","hash":"518cd46e65172cacdaec5bbfe248de99aa15a4a8","modified":1641049296729},{"_id":"themes/next/docs/comment_评论.md","hash":"513841d3e9ba56b560444f2e87cd4fdfe765f4bd","modified":1641049296730},{"_id":"themes/next/docs/navigation_导航栏.md","hash":"97fd3482decff0941d5489ba344bbc610d485808","modified":1641049296730},{"_id":"themes/next/docs/pagefooter_页脚.md","hash":"f8981b6bb4a7e7b630027f0c8e28ef95bd43d1c4","modified":1641049296730},{"_id":"themes/next/docs/socail_社交.md","hash":"bc383ef54fffb302aa9a7aee8f2351f7c3823eb5","modified":1641049296731},{"_id":"themes/next/docs/widget_部件.md","hash":"b8161c29699701040d389be394c2a88dac714ea8","modified":1641049296731},{"_id":"themes/next/languages/default.yml","hash":"2df42359e6646c0c2903ada8411100a8f1d15134","modified":1641049296732},{"_id":"themes/next/languages/en.yml","hash":"2df42359e6646c0c2903ada8411100a8f1d15134","modified":1641049296732},{"_id":"themes/next/languages/zh-CN.yml","hash":"3e28e97eaf0e172ddee96b2d6f8ba604d90ff24d","modified":1641049296732},{"_id":"themes/next/languages/zh-TW.yml","hash":"c727b3550a12ad6f99b13e1b320466f8238f4b54","modified":1641049296733},{"_id":"themes/next/layout/archive.ejs","hash":"5afa6387ae87e15a4562822850806c51f471cbe8","modified":1641049296737},{"_id":"themes/next/layout/index.ejs","hash":"3317310e01719dd58878fb4b7bd1b41d495800af","modified":1641049296737},{"_id":"themes/next/layout/layout.ejs","hash":"cbdce5eecad781dd0cb8e0c6788a9bf5e9359800","modified":1641049296738},{"_id":"themes/next/layout/post.ejs","hash":"be2fe9171f1c8f15447b8fe6e69a82cd40a4dead","modified":1641049296738},{"_id":"themes/next/layout/tag.ejs","hash":"f13f991cdd2d462cfaff2ead0a110504e10d1d2f","modified":1641049296738},{"_id":"themes/next/screenshots/daily.jpg","hash":"5ab1de0c8c1b749c09c96b774b5f36e597167546","modified":1641049296739},{"_id":"source/images/2.jpg","hash":"09eabf60c580d5737fdf17fc802b00a906d1ef81","modified":1745373303227},{"_id":"themes/next/layout/_partial/article-archive.ejs","hash":"32e6d38ac9074922f958126da4eb5cde0ae98da4","modified":1641049296735},{"_id":"themes/next/layout/_partial/after-footer.ejs","hash":"00588b4db6aeec2d1f7951ee96980764a15e7f4f","modified":1641049296734},{"_id":"themes/next/layout/_partial/article-index.ejs","hash":"712c3930f7c5ebb433afedfcd6098d67e28da380","modified":1641049296735},{"_id":"themes/next/layout/_partial/comment.ejs","hash":"9c8975d87fe1a1aad63cd74affa68f42ec3334e1","modified":1641049296735},{"_id":"themes/next/layout/_partial/footer.ejs","hash":"5f190a7233be1322e744fecd2759b8e8f7042be5","modified":1641049296736},{"_id":"themes/next/layout/_partial/head.ejs","hash":"9338cdc926aae79a50733e014e82471202b8fa07","modified":1641049296736},{"_id":"themes/next/layout/_partial/nav.ejs","hash":"cb5cb6371ad98a3fafb9d138a4f05b0b13a83edc","modified":1641049296736},{"_id":"themes/next/layout/_partial/pagination.ejs","hash":"98af75b95859dc6aae946497f27d7e51f753e5f6","modified":1641049296737},{"_id":"themes/next/source/css/_archive.scss","hash":"698f914f037079d1a25b9d86923eac4775b2ec7a","modified":1641049296740},{"_id":"themes/next/source/css/_comment.scss","hash":"8f92712c08489332c824d13e9e3d11bd2a0f1fd0","modified":1641049296740},{"_id":"themes/next/source/css/_highlight.scss","hash":"7d0bb75b74bea68dc04fa0346949d8f17fd28a0b","modified":1641049296741},{"_id":"themes/next/source/css/_mobile.scss","hash":"2b7297a4539e6ae803fe459ef411aa4149b24fcf","modified":1641049296741},{"_id":"themes/next/source/css/_nav.scss","hash":"eebe106b0360ea5d6735c59b524338faf0937d45","modified":1641049296741},{"_id":"themes/next/source/css/_normalize.scss","hash":"59fff706bed3120e3d9d6d0092a0372c172ee537","modified":1641049296742},{"_id":"themes/next/source/css/_post.scss","hash":"d674fd9312c33f98177ba8f7e144b2a663c60fd9","modified":1641049296742},{"_id":"themes/next/source/css/_daily.scss","hash":"e4261421d6c6af5b20c8e2b36353ea95cadb4eef","modified":1641049296740},{"_id":"themes/next/source/css/_variables.scss","hash":"508a896974912ccfdc4b14397df9fa4924d31dbf","modified":1641049296742},{"_id":"themes/next/source/css/style.scss","hash":"163cde007c7fb3debf9f53594c72d6536242f688","modified":1641049296742},{"_id":"themes/next/source/js/app.js","hash":"b74710d1dd7b7d1407b4fcfc9499bc37de69b21e","modified":1641049296745},{"_id":"themes/next/source/images/arrow-left.svg","hash":"4230dcb796a40d7a0f54c68e1ffb1f325ad962a5","modified":1641049296743},{"_id":"themes/next/source/images/arrow-right.svg","hash":"98c04bf1be3ca657f1e9697dc63219ade0a5616c","modified":1641049296743},{"_id":"themes/next/source/images/github.svg","hash":"bc2e3f2e54c354acfe64899482f6379d25f04792","modified":1641049296743},{"_id":"themes/next/source/images/mail.svg","hash":"18b3549b0447d605ca252fefcaa4d8e11179ce21","modified":1641049296744},{"_id":"themes/next/source/images/menu.svg","hash":"a1837ac76bc3e2aaf30450941bfefcb29ba16411","modified":1641049296744},{"_id":"themes/next/source/images/twitter.svg","hash":"2bef6c843de0113721c6c5d1676385897a22a446","modified":1641049296744},{"_id":"themes/next/source/images/weibo.svg","hash":"ffd43d8ae9f9ec4f5ae8b97cafa9023ac2a4e59b","modified":1641049296745},{"_id":"source/images/3.jpg","hash":"6945fca23addd145385ee2314988b62f80e48b68","modified":1745373304243},{"_id":"source/images/1.jpg","hash":"ae1fa164825e5f30ac1e48ef05f60c11cf1ee753","modified":1745373302338},{"_id":"public/2025/04/简历/index.html","hash":"dc250393b000cd094ed187bd40191e4b3371c15f","modified":1745374040754},{"_id":"public/archives/index.html","hash":"8d5129fcaee2c95af932a5c5280d55a2fed3e1e0","modified":1745374040754},{"_id":"public/archives/2022/index.html","hash":"90059b633e96f4ca2853404a15e04424d55d51a5","modified":1745374040754},{"_id":"public/archives/2022/02/index.html","hash":"f139d7b9f9366e564c0d6a446fe134859ea304ef","modified":1745374040754},{"_id":"public/archives/2022/01/index.html","hash":"07251901f3b607ca824fa89caa465cb25b84384d","modified":1745374040754},{"_id":"public/archives/2025/index.html","hash":"3635290b26bec607ad1b5d60e1c76a0228348e82","modified":1745374040754},{"_id":"public/archives/2025/04/index.html","hash":"eb7e5150b9004cb9830e17a607d4c379d575a7d5","modified":1745374040754},{"_id":"public/2022/01/js常用方法/index.html","hash":"3ea0ce87715e2d2dc3b1d6f6b04665543f813d0d","modified":1745374040754},{"_id":"public/2022/02/vue/index.html","hash":"9486770727e6453b63f99a4f421cedc2cbf2fe45","modified":1745374040754},{"_id":"public/index.html","hash":"04d89de0fbdb5ffc42696ea7c2e2b2759696bb7a","modified":1745374040754},{"_id":"public/tags/javascript/index.html","hash":"9f09ca164f063ebf0765606f03dec46e62f26b43","modified":1745374040754},{"_id":"public/css/style.scss","hash":"163cde007c7fb3debf9f53594c72d6536242f688","modified":1745374040754},{"_id":"public/images/arrow-left.svg","hash":"4230dcb796a40d7a0f54c68e1ffb1f325ad962a5","modified":1745374040754},{"_id":"public/images/arrow-right.svg","hash":"98c04bf1be3ca657f1e9697dc63219ade0a5616c","modified":1745374040754},{"_id":"public/images/mail.svg","hash":"18b3549b0447d605ca252fefcaa4d8e11179ce21","modified":1745374040754},{"_id":"public/images/github.svg","hash":"bc2e3f2e54c354acfe64899482f6379d25f04792","modified":1745374040754},{"_id":"public/images/twitter.svg","hash":"2bef6c843de0113721c6c5d1676385897a22a446","modified":1745374040754},{"_id":"public/images/menu.svg","hash":"a1837ac76bc3e2aaf30450941bfefcb29ba16411","modified":1745374040754},{"_id":"public/images/weibo.svg","hash":"ffd43d8ae9f9ec4f5ae8b97cafa9023ac2a4e59b","modified":1745374040754},{"_id":"public/js/app.js","hash":"b74710d1dd7b7d1407b4fcfc9499bc37de69b21e","modified":1745374040754},{"_id":"public/images/2.jpg","hash":"09eabf60c580d5737fdf17fc802b00a906d1ef81","modified":1745374040754},{"_id":"public/images/3.jpg","hash":"6945fca23addd145385ee2314988b62f80e48b68","modified":1745374040754},{"_id":"public/images/1.jpg","hash":"ae1fa164825e5f30ac1e48ef05f60c11cf1ee753","modified":1745374040754}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"JavaScript 常用方法","date":"2022-01-01T14:38:25.131Z","modified":"2021-4-20 14.37","photos":["/images/1.jpg"],"_content":"\nJavaScript 中常用的方法汇总\n\n<!--more-->\n\n##### object.keys\n\n遍历对象的属性名返回一个新数组\n\n##### object.difineProperty\n\n第一个参数对象 ：目标（给哪个对象添加属性）\n\n第二个参数字符串 ：名字（属性名叫什么）\n\n第三个参数类型是对象：配置项 {enumerable:true；控制属性是否可枚举，默认值 false。writable:true;控制属性是否可修改，默认 false。configurable:true;控制属性可删除，默认 false。}\n\n数据代理案例\n\n```js\nlet a = {\n  b:\"1\"\n}\nlet c = \"2\"\nObject.defineProprrty(a,\"c\",{\n  get(){\n    return c\n  }\n  set(value){\n  return c = value\n}\n})\n```\n\n##### ?.和??运算符\n\n??和||类似但是不同的是逻辑或会在左侧为假值时返回右侧的操作符而？？只会在左侧为 null 和 undefined 时返回右侧\n\n`?.`主要用于在多层的 object/array 进行取值和函数调用，一般如果左边的值为 undefined 和 null 时会报错，但是加上?.就不会报错了\n\n```js\nlet b;\nb?.map((i) => {\n  console.log(i);\n});\n```\n\n##### for in 和 for of\n\nfor in\n\n1.for in 更适合遍历对象，因为 for in 利用索引遍历，不能进行几何运算\n\n2.会遍历数组的所有可枚举值，包括原型\n\nfor of\n\n1.for of 遍历的是数组元素值，而且只是数组内的元素，不包括原型\n\n2.for of 不能遍历对象，只能遍历有迭代器对象（iterator）的集合，如数组，字符串,map,set 等\n\n```js\n// for in\nvar obj = { a: 1, b: 2, c: 3 };\n\nfor (let key in obj) {\n  console.log(key);\n}\n// a b c\n\n//for of\nconst array1 = [\"a\", \"b\", \"c\"];\n\nfor (const val of array1) {\n  console.log(val);\n}\n// a b c\n```\n\nhasOwnProperty()\n\n可以判断某属性是不是该对象的实例属性\n\n```js\nvar arr = [1, 2, 3];\nArray.prototype.a = 123;\nfor (let index in arr) {\n  if (arr.hasOwnProperty(index)) {\n    let res = arr[index];\n    console.log(res);\n  }\n}\n// 1 2 3\n```\n\n##### Symbol\n\n这个函数会动态的生成一个匿名、全局唯一的值。\n\nsymbol 的基本用处\n\n1.避免对象的键被覆盖\n\n2.避免魔术字符串\n\n##### 模糊搜索\n\n```\n//vue计算属性写法\ncomputed:{\n\treturn this.list.filter(i=>{\n\t\treturn i.name.indexof(this.inputValue) !== -1\n\t})\n}\n//计算属性初始化就会执行一次，indexof（）这时候还没输入，所以indexof（''）返回全部\n```\n\n##### indexof()\n\n```\n//indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。\nstringObject.indexOf(searchvalue,fromindex)\nfromindex 非必填 规定在字符串中开始检索的位置\n```\n\n##### filter()\n\n```\nArray.filter() 三个参数 item index arr\n1.创建一个新的数组\n2.必须有返回值 return\n3.和map不同的是符合条件返回true 否则false\n\n方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。\n```\n\n##### sort()\n\nArray.sort() 两个参数 a b\n\n1.改变原数据\n\n2.a-b 升序 b-a 降序\n\n3.写回调函数时要有返回值\n\n##### Push()\n\n往数组末尾加一个或多个元素 返回改变后数组的长度\n\n##### unshift()\n\n方法可向数组的开头添加一个或更多元素，并返回新的长度 返回改变后数组的长度\n\n##### splice()\n\n方法向/从数组添加/删除项目，并返回删除的项目。\n\n三个参数\n\n第一个从什么地方添加或删除写 index，如果写负数就是从后面开始\n\n第二个 删除多少个 写 0 就是不删 或者不写也是不删\n\n第三个 需要添加到数组的新项目\n\n##### Shift()\n\n删除数组中的第一个元素 改变原数组\n\n##### reverse()\n\n方法用于颠倒数组中元素的顺序。\n","source":"_posts/js常用方法.md","raw":"title: JavaScript 常用方法\ndate: 2021-4-20 14.37  \nmodified: 2021-4-20 14.37\ntag:\n\n- javascript\n\nphotos:\n\n- /images/1.jpg\n\n---\n\nJavaScript 中常用的方法汇总\n\n<!--more-->\n\n##### object.keys\n\n遍历对象的属性名返回一个新数组\n\n##### object.difineProperty\n\n第一个参数对象 ：目标（给哪个对象添加属性）\n\n第二个参数字符串 ：名字（属性名叫什么）\n\n第三个参数类型是对象：配置项 {enumerable:true；控制属性是否可枚举，默认值 false。writable:true;控制属性是否可修改，默认 false。configurable:true;控制属性可删除，默认 false。}\n\n数据代理案例\n\n```js\nlet a = {\n  b:\"1\"\n}\nlet c = \"2\"\nObject.defineProprrty(a,\"c\",{\n  get(){\n    return c\n  }\n  set(value){\n  return c = value\n}\n})\n```\n\n##### ?.和??运算符\n\n??和||类似但是不同的是逻辑或会在左侧为假值时返回右侧的操作符而？？只会在左侧为 null 和 undefined 时返回右侧\n\n`?.`主要用于在多层的 object/array 进行取值和函数调用，一般如果左边的值为 undefined 和 null 时会报错，但是加上?.就不会报错了\n\n```js\nlet b;\nb?.map((i) => {\n  console.log(i);\n});\n```\n\n##### for in 和 for of\n\nfor in\n\n1.for in 更适合遍历对象，因为 for in 利用索引遍历，不能进行几何运算\n\n2.会遍历数组的所有可枚举值，包括原型\n\nfor of\n\n1.for of 遍历的是数组元素值，而且只是数组内的元素，不包括原型\n\n2.for of 不能遍历对象，只能遍历有迭代器对象（iterator）的集合，如数组，字符串,map,set 等\n\n```js\n// for in\nvar obj = { a: 1, b: 2, c: 3 };\n\nfor (let key in obj) {\n  console.log(key);\n}\n// a b c\n\n//for of\nconst array1 = [\"a\", \"b\", \"c\"];\n\nfor (const val of array1) {\n  console.log(val);\n}\n// a b c\n```\n\nhasOwnProperty()\n\n可以判断某属性是不是该对象的实例属性\n\n```js\nvar arr = [1, 2, 3];\nArray.prototype.a = 123;\nfor (let index in arr) {\n  if (arr.hasOwnProperty(index)) {\n    let res = arr[index];\n    console.log(res);\n  }\n}\n// 1 2 3\n```\n\n##### Symbol\n\n这个函数会动态的生成一个匿名、全局唯一的值。\n\nsymbol 的基本用处\n\n1.避免对象的键被覆盖\n\n2.避免魔术字符串\n\n##### 模糊搜索\n\n```\n//vue计算属性写法\ncomputed:{\n\treturn this.list.filter(i=>{\n\t\treturn i.name.indexof(this.inputValue) !== -1\n\t})\n}\n//计算属性初始化就会执行一次，indexof（）这时候还没输入，所以indexof（''）返回全部\n```\n\n##### indexof()\n\n```\n//indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。\nstringObject.indexOf(searchvalue,fromindex)\nfromindex 非必填 规定在字符串中开始检索的位置\n```\n\n##### filter()\n\n```\nArray.filter() 三个参数 item index arr\n1.创建一个新的数组\n2.必须有返回值 return\n3.和map不同的是符合条件返回true 否则false\n\n方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。\n```\n\n##### sort()\n\nArray.sort() 两个参数 a b\n\n1.改变原数据\n\n2.a-b 升序 b-a 降序\n\n3.写回调函数时要有返回值\n\n##### Push()\n\n往数组末尾加一个或多个元素 返回改变后数组的长度\n\n##### unshift()\n\n方法可向数组的开头添加一个或更多元素，并返回新的长度 返回改变后数组的长度\n\n##### splice()\n\n方法向/从数组添加/删除项目，并返回删除的项目。\n\n三个参数\n\n第一个从什么地方添加或删除写 index，如果写负数就是从后面开始\n\n第二个 删除多少个 写 0 就是不删 或者不写也是不删\n\n第三个 需要添加到数组的新项目\n\n##### Shift()\n\n删除数组中的第一个元素 改变原数组\n\n##### reverse()\n\n方法用于颠倒数组中元素的顺序。\n","slug":"js常用方法","published":1,"updated":"2025-04-23T02:01:09.331Z","comments":1,"layout":"post","link":"","_id":"cm9tan15g0000rxrc7nmw80bm","content":"<p>JavaScript 中常用的方法汇总</p>\n<a id=\"more\"></a>\n\n<h5 id=\"object-keys\"><a href=\"#object-keys\" class=\"headerlink\" title=\"object.keys\"></a>object.keys</h5><p>遍历对象的属性名返回一个新数组</p>\n<h5 id=\"object-difineProperty\"><a href=\"#object-difineProperty\" class=\"headerlink\" title=\"object.difineProperty\"></a>object.difineProperty</h5><p>第一个参数对象 ：目标（给哪个对象添加属性）</p>\n<p>第二个参数字符串 ：名字（属性名叫什么）</p>\n<p>第三个参数类型是对象：配置项 {enumerable:true；控制属性是否可枚举，默认值 false。writable:true;控制属性是否可修改，默认 false。configurable:true;控制属性可删除，默认 false。}</p>\n<p>数据代理案例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  b:<span class=\"string\">\"1\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"string\">\"2\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProprrty(a,<span class=\"string\">\"c\"</span>,&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(value)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"和-运算符\"><a href=\"#和-运算符\" class=\"headerlink\" title=\"?.和??运算符\"></a>?.和??运算符</h5><p>??和||类似但是不同的是逻辑或会在左侧为假值时返回右侧的操作符而？？只会在左侧为 null 和 undefined 时返回右侧</p>\n<p><code>?.</code>主要用于在多层的 object/array 进行取值和函数调用，一般如果左边的值为 undefined 和 null 时会报错，但是加上?.就不会报错了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b;</span><br><span class=\"line\">b?.map(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for-in-和-for-of\"><a href=\"#for-in-和-for-of\" class=\"headerlink\" title=\"for in 和 for of\"></a>for in 和 for of</h5><p>for in</p>\n<p>1.for in 更适合遍历对象，因为 for in 利用索引遍历，不能进行几何运算</p>\n<p>2.会遍历数组的所有可枚举值，包括原型</p>\n<p>for of</p>\n<p>1.for of 遍历的是数组元素值，而且只是数组内的元素，不包括原型</p>\n<p>2.for of 不能遍历对象，只能遍历有迭代器对象（iterator）的集合，如数组，字符串,map,set 等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for in</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a b c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//for of</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> array1) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a b c</span></span><br></pre></td></tr></table></figure>\n\n<p>hasOwnProperty()</p>\n<p>可以判断某属性是不是该对象的实例属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.hasOwnProperty(index)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = arr[index];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h5><p>这个函数会动态的生成一个匿名、全局唯一的值。</p>\n<p>symbol 的基本用处</p>\n<p>1.避免对象的键被覆盖</p>\n<p>2.避免魔术字符串</p>\n<h5 id=\"模糊搜索\"><a href=\"#模糊搜索\" class=\"headerlink\" title=\"模糊搜索\"></a>模糊搜索</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;vue计算属性写法</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\treturn this.list.filter(i&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\treturn i.name.indexof(this.inputValue) !&#x3D;&#x3D; -1</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;计算属性初始化就会执行一次，indexof（）这时候还没输入，所以indexof（&#39;&#39;）返回全部</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"indexof\"><a href=\"#indexof\" class=\"headerlink\" title=\"indexof()\"></a>indexof()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</span><br><span class=\"line\">stringObject.indexOf(searchvalue,fromindex)</span><br><span class=\"line\">fromindex 非必填 规定在字符串中开始检索的位置</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.filter() 三个参数 item index arr</span><br><span class=\"line\">1.创建一个新的数组</span><br><span class=\"line\">2.必须有返回值 return</span><br><span class=\"line\">3.和map不同的是符合条件返回true 否则false</span><br><span class=\"line\"></span><br><span class=\"line\">方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h5><p>Array.sort() 两个参数 a b</p>\n<p>1.改变原数据</p>\n<p>2.a-b 升序 b-a 降序</p>\n<p>3.写回调函数时要有返回值</p>\n<h5 id=\"Push\"><a href=\"#Push\" class=\"headerlink\" title=\"Push()\"></a>Push()</h5><p>往数组末尾加一个或多个元素 返回改变后数组的长度</p>\n<h5 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h5><p>方法可向数组的开头添加一个或更多元素，并返回新的长度 返回改变后数组的长度</p>\n<h5 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h5><p>方法向/从数组添加/删除项目，并返回删除的项目。</p>\n<p>三个参数</p>\n<p>第一个从什么地方添加或删除写 index，如果写负数就是从后面开始</p>\n<p>第二个 删除多少个 写 0 就是不删 或者不写也是不删</p>\n<p>第三个 需要添加到数组的新项目</p>\n<h5 id=\"Shift\"><a href=\"#Shift\" class=\"headerlink\" title=\"Shift()\"></a>Shift()</h5><p>删除数组中的第一个元素 改变原数组</p>\n<h5 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h5><p>方法用于颠倒数组中元素的顺序。</p>\n","site":{"data":{}},"excerpt":"<p>JavaScript 中常用的方法汇总</p>","more":"<h5 id=\"object-keys\"><a href=\"#object-keys\" class=\"headerlink\" title=\"object.keys\"></a>object.keys</h5><p>遍历对象的属性名返回一个新数组</p>\n<h5 id=\"object-difineProperty\"><a href=\"#object-difineProperty\" class=\"headerlink\" title=\"object.difineProperty\"></a>object.difineProperty</h5><p>第一个参数对象 ：目标（给哪个对象添加属性）</p>\n<p>第二个参数字符串 ：名字（属性名叫什么）</p>\n<p>第三个参数类型是对象：配置项 {enumerable:true；控制属性是否可枚举，默认值 false。writable:true;控制属性是否可修改，默认 false。configurable:true;控制属性可删除，默认 false。}</p>\n<p>数据代理案例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  b:<span class=\"string\">\"1\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"string\">\"2\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProprrty(a,<span class=\"string\">\"c\"</span>,&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(value)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"和-运算符\"><a href=\"#和-运算符\" class=\"headerlink\" title=\"?.和??运算符\"></a>?.和??运算符</h5><p>??和||类似但是不同的是逻辑或会在左侧为假值时返回右侧的操作符而？？只会在左侧为 null 和 undefined 时返回右侧</p>\n<p><code>?.</code>主要用于在多层的 object/array 进行取值和函数调用，一般如果左边的值为 undefined 和 null 时会报错，但是加上?.就不会报错了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b;</span><br><span class=\"line\">b?.map(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for-in-和-for-of\"><a href=\"#for-in-和-for-of\" class=\"headerlink\" title=\"for in 和 for of\"></a>for in 和 for of</h5><p>for in</p>\n<p>1.for in 更适合遍历对象，因为 for in 利用索引遍历，不能进行几何运算</p>\n<p>2.会遍历数组的所有可枚举值，包括原型</p>\n<p>for of</p>\n<p>1.for of 遍历的是数组元素值，而且只是数组内的元素，不包括原型</p>\n<p>2.for of 不能遍历对象，只能遍历有迭代器对象（iterator）的集合，如数组，字符串,map,set 等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for in</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a b c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//for of</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> array1) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a b c</span></span><br></pre></td></tr></table></figure>\n\n<p>hasOwnProperty()</p>\n<p>可以判断某属性是不是该对象的实例属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.hasOwnProperty(index)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = arr[index];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h5><p>这个函数会动态的生成一个匿名、全局唯一的值。</p>\n<p>symbol 的基本用处</p>\n<p>1.避免对象的键被覆盖</p>\n<p>2.避免魔术字符串</p>\n<h5 id=\"模糊搜索\"><a href=\"#模糊搜索\" class=\"headerlink\" title=\"模糊搜索\"></a>模糊搜索</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;vue计算属性写法</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\treturn this.list.filter(i&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\treturn i.name.indexof(this.inputValue) !&#x3D;&#x3D; -1</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;计算属性初始化就会执行一次，indexof（）这时候还没输入，所以indexof（&#39;&#39;）返回全部</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"indexof\"><a href=\"#indexof\" class=\"headerlink\" title=\"indexof()\"></a>indexof()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</span><br><span class=\"line\">stringObject.indexOf(searchvalue,fromindex)</span><br><span class=\"line\">fromindex 非必填 规定在字符串中开始检索的位置</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.filter() 三个参数 item index arr</span><br><span class=\"line\">1.创建一个新的数组</span><br><span class=\"line\">2.必须有返回值 return</span><br><span class=\"line\">3.和map不同的是符合条件返回true 否则false</span><br><span class=\"line\"></span><br><span class=\"line\">方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h5><p>Array.sort() 两个参数 a b</p>\n<p>1.改变原数据</p>\n<p>2.a-b 升序 b-a 降序</p>\n<p>3.写回调函数时要有返回值</p>\n<h5 id=\"Push\"><a href=\"#Push\" class=\"headerlink\" title=\"Push()\"></a>Push()</h5><p>往数组末尾加一个或多个元素 返回改变后数组的长度</p>\n<h5 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h5><p>方法可向数组的开头添加一个或更多元素，并返回新的长度 返回改变后数组的长度</p>\n<h5 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h5><p>方法向/从数组添加/删除项目，并返回删除的项目。</p>\n<p>三个参数</p>\n<p>第一个从什么地方添加或删除写 index，如果写负数就是从后面开始</p>\n<p>第二个 删除多少个 写 0 就是不删 或者不写也是不删</p>\n<p>第三个 需要添加到数组的新项目</p>\n<h5 id=\"Shift\"><a href=\"#Shift\" class=\"headerlink\" title=\"Shift()\"></a>Shift()</h5><p>删除数组中的第一个元素 改变原数组</p>\n<h5 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h5><p>方法用于颠倒数组中元素的顺序。</p>"},{"title":"简历","date":"2025-04-23T01:47:10.200Z","modified":"025-4-23 09.48","photos":["/images/2.jpg"],"_content":"\n简历\n\n<!--more-->\n\n","source":"_posts/简历.md","raw":"title: 简历\ndate: 2025-4-23 09.48  \nmodified: 025-4-23 09.48 \ntag:\n\n- javascript\n\nphotos:\n\n- /images/2.jpg\n\n---\n\n简历\n\n<!--more-->\n\n","slug":"简历","published":1,"updated":"2025-04-23T02:00:11.828Z","comments":1,"layout":"post","link":"","_id":"cm9tan15j0001rxrcb8jhfi4h","content":"<p>简历</p>\n<a id=\"more\"></a>\n\n","site":{"data":{}},"excerpt":"<p>简历</p>","more":""},{"title":"VUE 2 & 3","date":"2022-02-18T15:29:21.345Z","modified":"2021-4-20 14.37","photos":["/images/3.jpg"],"_content":"\nvue 复习\n\n<!--more-->\n\n##### MVVM\n\nVUE 参考了 mvvm 架构模型，m（模型 model）data 中的数据，v（视图 view）模版，vm（视图模型 viewmodel）vue 实例对象\n\n但是 vue 中添加了一个属性。ref\n通过 ref 可以拿到 dom 对象，通过 ref 直接去操作视图。这一点上，违背了 mvvm\n\n##### 数据代理\n\n![](imgs/Snipaste_2021-11-16_23-33-59.png)\n\n这部分只做了数据代理，没有做数据劫持，也就是数据改变视图改变（响应式），其实\\_data 里面的属性 vue 有做数据劫持。\n\nVue2.x 是使用 Object.defindProperty()，来进行对对象的监听的，但是改变数组里的某个值不会触发 set，(如果要监听的到话，需要重新编写数组的方法)， 必须遍历每个对象的每个属性，如果对象嵌套很深的话，需要使用递归调用。\n\n##### 事件修饰符\n\n1.prevent:阻止默认事件（常用）\n\n2.stop：阻止时间冒泡（常用）\n\n3.once：事件只触发一次（常用）\n\n4.capture:使用事件的捕获模式\n\n5.self：只有 event.target 是当前操作元素才会触发事件\n\n6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕。（@scroll 滚动条事件用不到，@wheel 滚轮事件用到一般 c 端会用到）\n\nTips：可以使用链式写法@click.prevent.stop\n\n##### 键盘事件\n\n@keyup.enter=\"\"\n\n1.vue 常用的按键别名\n\n回车 enter\n\n删除 delete （退格和删除都能触发）\n\n退出 esc\n\n空格 space\n\n2.vue 为提供的按键，可以使用案件原始的 key 值去绑定，但注意转为短横线命名。\n\n3.系统修饰键用法比较特殊 最好配合 keydown 使用\n\n4.vue.config.keyCode.自定义键名 = 键码\n\nTips：可以使用链式写法@keyup.enter.y=\"\"意思是 enter 和 y 都要按才能触发\n\n##### 计算属性\n\n```js\n完整写法\ncomputed:{\n\tfullName:{\n\t\tget(){\n\t\t\treturn this.nameA+'-'this.nameB\n\t\t}\n\t\tset(value){\n\t\tconst arr = value.split('-')\n\t\tthis.nameA = arr[0]\n\t\tthis.nameB = arr[1]\n\t\t}\n\t}\n}\n简写（只用到get，用不到set的时候使用）\ncomputed:{\n\tfullName(){\n\t\treturn this.nameA+'-'this.nameB\n\t}\n}\n```\n\n##### 监视属性\n\n```js\ndata:{\n\tid:2,\n\tnumbers:{\n\t\ta:1,\n\t\tb:1\n\t}\n}\nwatch:{\n\tid:{\n\t\thandler(){\n\t\t\tconsole.log('a改变了')\n\t\t}\n\t}，\n\t//如果要监视多级结构中某个属性的变化可以这样写\n\t'numbers.a':{\n  \thandler(new,old){\n  \t\t\tconsole.log('a改变了')\n  \t}\n\t}，\n\t//监视多级结构所有属性的变化\n\tnumbers:{\n\t\timmediate:true,//初始化时让handler执行一次\n\t\tdeep:true,//深度监视\n\t\thandler(new,old){\n\t\tconsole.log('numbers改变了')\n\t\t}\n\t}\n}\n//简写（用不到deep，和immediate时使用）\nwatch:{\n\tid(new,old){\n\t\tconsole.log('id改变了')\n\t}\n}\n\nTips：\nvm.$watch('id',{\n\t\timmediate:true,//初始化时让handler执行一次\n\t\tdeep:true,//深度监视\n\t\thandler(n,o){\n\t\t}\n})\nvm.$watch('id',function(n,o){\nconsole.log('id改变了'，n,o)\n})\n```\n\n##### 计算属性和监听属性的区别\n\ncomputed 能完成的，watch 都能完成，watch 可以执行异步任务，computed 不行，computed 只有原始值发生变化，才会触发，具有缓存，watch 是数据改变就会触发。\n\nTips：所有被 vue 管理的函数嘴还写成普通函数，所有不被 vue 管理的函数最好写成箭头函数，这样 this 才是指向 vm 或组件实例对象。\n\n##### vue.set()\n\n##### 数据劫持\n\n```js\n//正常初始化data后，模版解析渲染页面，这个时候是响应式的，但是后面又想给data对象中追加数据，这个时候vue不做响应式，就像vue的bug。\n如果要给对象加属性，而且要响应式，要用\n1.vue.set(target,propertyName/index,value)或vm.$set(target,propertyName/index,value)\n2.但是vue.set和vm.$set不能给vm或vm根数据对象添加对象（Tips:不能给data直接添加属性 要再加一层结构）\n如果要修改数组中的某个元素一定要用如下方法不然不能响应式，可以使用这些vue包裹过的API push() shift() unshift() splice() sort() reverse()或者vm.$set() vue.set()\n```\n\n##### Es6\n\n``` js\n//形参默认值\ntest(a=\"1\"){\n\tconsole.log(a)\n}\ntest（）//1\ntest（2）//2\n```\n\n##### 管道符\n\n```js\n//和methods 同一层级的配置项\n常用在插值表达式中{{a | c}}\nmethods:{\n\n},\nfilter:{\n\tc(value){\n\t//value 会收到a\n\treturn a + 1\n\t}\n}\n```\n\n##### V-html\n\n向指定节点渲染包换 html 结构的内容\n\nv-html 可以识别 html 结构\n\nv-html 有安全性问题 不要在用户提交的内容上使用 容易导致 xxs 攻击\n\n##### v-clock\n\n直接写在标签里 <div v-clock/>\n\n使用 css 属性属性选择器[v-clock]{}可以解决因为网速满页面出现{{name}}情况\n\n当脚本跑起来时 vue 会删掉 v-clock 属性\n\n##### V-once\n\n只在初始化时解析一次 后面就视为静态内容 <div v-once/>\n\n##### 自定义指令\n\n```js\n1.v-自定义指令名\n\n2.写在配置项directives：{\n\n自定义指令名（element，binding）{\n\n\t\telement.innerText = binding.value * 10\n\n \t}\n\n}\n//如果需要处理一些逻辑时自定义指令写成对象形式\nfbind:{\n  //一上来调用，指令绑定时\n  bind(e,b){\n\n  },\n  //指令所在的元素被插入页面时\n  inserted(e,d){\n    //比如input获取焦点需要写在这里\n  },\n  //指令所在的模版被重新解析时\n   update(e,b){\n\n   }\n}\n\n3.初始化时调用一次，指令所在的模版被重新解析式调用。\n4.指令函数里的this指向window，而不是由vue管理的函数都指向vm，因为指令函数把元素传给你了，方便你操作dom\n```\n\n##### 生命周期\n\n```js\nbeforCreated 访问不到数据和方法，因为还没数据监听和数据代理\ncreated 初始化完成，数据和方法都可以访问 但是真实dom还没有挂载，一般写初始化数据，比如通过求返回的数据渲染页面，但是访问不到htmlelement\nbeforMount 挂载前，页面已经出来但是还未经vue编译，此时对dom操作都没有效果，因为下一步会将之前准备好的虚拟dom转换成真实dom，而不是你改完的dom\nmounted 数据，方法和dom都已经准好，一般在这里写需要等初始化页面完成后，再对html的dom节点操作的需求。如果在这里面写会更新dom需要用到的data数据时，比如根据借口返回值渲染页面，可能发生闪屏。\nbeforUpdate 数据已经更新，但是页面还没渲染\nupdated 页面渲染完成\nbeforDestory 实例销毁前，一般写收尾工作，比如消除定时器等。注意不要写操作数据，因为不会触发更新。\ndestory\n```\n\n##### vue 组件化\n\n```js\n有单文件组件和多文件组件,下面是单文件组件的配置写法，一般实际项目上不会用单文件组件，到vue开发工具里组件注册时的名字会变成首字母大写，如果不想用注册时的名字，可以加配置项name\n<script>\n      Vue.config.productionTip = false;\n      const msg = Vue.extend({\n        data() {\n          return {\n            msg: \"不是\",\n          };\n        },\n        template: `\n        <div>\n          <p>{{msg}}</p>\n          </div>\n        `,\n      });\n      const error1 = {\n        data() {\n          return {\n            error: \"错误\",\n          };\n        },\n        template: `\n        <p>{{error}}</p>\n        `,\n      };\n      const error = {\n        data() {\n          return {\n            error: \"是\",\n          };\n        },\n        template: `\n        <div>\n          <p>{{error}}</p>\n          <error1 />\n          </div>\n        `,\n        //组件嵌套\n        components: {\n          error1,\n        },\n      };\n\n      const vm = new Vue({\n        el: \"#app\",\n        components: {\n          error,\n          msg,\n        },\n        data() {\n          return {};\n        },\n        methods: {},\n        created() {},\n        mounted() {},\n      });\n    </script>\n```\n\nVueComponent\n\n```js\n//每一个组件其实就是VueComponent的实例对象，VueComponen是一个构造函数，由vue.extend生成的，也就是new出来的，每个组件里的this指VueComponent，我们写的组件，比如组件名叫school，使用时<school >，vue在解析的时候会帮我们创建new Vuecomponent(options)；\n```\n\n##### 内置关系\n\n```js\nVueComponent.property._proto_ === vue.property\n组件实例的原型对象默认zhii x指向vue原型对象，这样方便组件访问vue的属性和方法。组件实例的原型对象默认指向object原型对象，vue改变了它的指向。\n//Tips：所有函数实例的_proto_都指向缔造它的原型原型对象，property是显式的原型属性，_proto_是隐式的原型属性\n```\n\n##### 为什么 main.js 里要写成 render 函数\n\n```\nimport Vue from 'vue'实际上引入的是运行时vue，并不是完整版的vue，少了template解析器，因为webpack打包完后就不用template了,这样做节约了100多kb,最重要的打包后不需要用到template解析器代码。\n```\n\n##### props\n\n```\n功能：让组件接受外部传的数据\n传递数据\n<Demo name=\"xxx\"/>\n接受数据：\n第一种方式（只接收）\nprops:['name']\n第二种方式（限制类型）\nprops:{\nname:String\n}\n第三种方式（限制类型，限制是否必传，默认值）\nprops:[\n{name:String,required:true,default:'老王'}\n]\nTips：props是只读的，在组件内直接改prop会页面包错，需要在data中复制一份，myName:this.name\n```\n\n##### Mixin 混入\n\n```js\nexport defule {\n\tdata(){\n\n\t},\n\tmethods:{\n\n\t},\n\t//生命周期函数会都调用\n\tmounted(){\n\n\t}\n}\nimport mixins from './xxx'\n//局部混入\nmixins:['xxx']\n//全局混入\nVue.mixin(xxx)\n文件里有的，混入文件里也有，优先用文件里有的。\n```\n\n##### ES6 Module 及 CommonJS 的配对使用\n\n```js\nexport  function common(params) {\n  console.log(params)\n};\n\nexport let commcls=new class{\n  constructor(name,sex,age=27){\n    this.name=name;\n    this.sex=sex;\n    this.age=age;\n  }\n  GetName(){\n    return \"我的名字是\"+ this.name;\n  }\n  get Money(){\n    return \"我是属性钱，大家都爱我\"\n  }\n\n};\n\nexport  const pi=3.1415926;\n//这种写法是分别导出\n//按需导出的写法是去掉export，在最下面写上export {common,commcls,const}\n/**最常用的全部导出写法 export default{common:function common(params) {\n  console.log(params)\n}}写成键值对**/\n//以上有函数，js类，常量的导出\n\n导入\nimport {common,commcls} from './xxx'\nimport * as api from './xxx'\n\n导出\nmodule.exports = {\n    name: 'commonJS_exports.js',\n    add: function(a, b){\n        return a + b;\n    }\n}\n\n导入\nlet comObj = require('../api/module/commonJS_exports');\nlet {name} = require('../api/module/commonJS_exports');\n//在module对象中有一个属性loaded用于记录该模块是否被加载过，它的默认值为false，当模块第一次被加载和执行过后会设置为true，后面再次加载时检查到module.loaded为true, 则不会再次执行模块代码。require函数可以接收表达式，借助这个特性我们可以动态地指定模块加载路径\nconst moduleNames = ['foo.js', 'bar.js'];\nmoduleNames.forEach(name=>{\n   require('./' + name);\n})\n\nCommonJS和ES6 Module的区别\n//CommonJS模块依赖关系的建立发生在代码运行阶段,ES6 Module模块依赖关系的建立发生在代码编译阶段。前者可以动态指定require的模块路径，后者不行，但是可以冗余代码检测和排除，我们可以用静态分析工具分析工具检测出哪些模块没有被调用过，然后去掉这些模块，后者编译器程序效率更高。\n```\n\n###### 插件的使用\n\n```js\n创建一个plugins.js\nexport defulue{\n\tinstall(vue,x){\n\t\t//比如全局过滤器\n\t\tVue.filter(...)\n\t\t//全局混入\n\t\tVue.mixin(...)\n\t}\n}\n在main.js\nimport plugins from './plugins'\nVue.use(plugins,1)//可以传参\n\n```\n\n##### 组件传值\n\n```js\n1.父向子传值\n//父组件\n<Student :name=\"小明\"/>\n//自组件\nprops：[name]\n\n2.子向父传值\n(1)第一种\n//父组件\n\t<Student @getName=\"demo\"/>\n  //getName是自定义事件名称\n  methods:{\n    getName(name){\n      console.log(name)\n      //小明\n    }\n  }\n//子组件\n<button @clicl=\"sendName\"><button/>\n  data(){\n  return{\n    name:\"小明\"\n  }\n}\n\tmethods:{\n    sendName(){\n      //getName这里必须写的和在父组件里子组件标签上自定义事件名字一样\n      this.$emit('getName',this.name)\n      //解除绑定自定义事件\n      //this.$off('getName')\n    }\n  }\n(2)第二种\n//父组件\n<Student :getName=\"getName\"/>\n  //传一个函数给子组件\n  methods:{\n    getName(name){\n\n    }\n  }\n//子组件\n<button @clicl=\"sendName\"><button/>\ndata(){\n  return{\n    name:\"小明\"\n  }\n}\nprops：[getName]，\nmethods:{\n  sendName(){\n    this.getName(this.name)\n  }\n}\n(3)第三种\n//父组件\n<Student ref=\"Student\"/>\n  methods:{\n    getName(name){\n\n    }\n  }\n  mounted(){\n this.$refs.Student.$on('getName',this.getName)\n    //这种写法可以延迟绑定自定义事件\n}\n//子组件\n<button @clicl=\"sendName\"><button/>\n  data(){\n  return{\n    name:\"小明\"\n  }\n}\n\tmethods:{\n    sendName(){\n      this.$emit('getName',this.name)\n    }\n  }\n\n```\n\n##### $bus\n\n```js\n全局事件总线\n在main.js 里new Vue({\n...\nbeforCreated(){\n\tVue.prototype.$bus = this\n}\n})\nA组件接收数据\nmethods:{\n\tdemo(data){\n\n\t}\n},\nmounted(){\n\tthis.$bus.$on('xxx',this.demo)\n}\nB组件提供数据\nthis.$bus.$emit('xxx',this.data)\n```\n\n##### $nextTick\n\n- 作用：在下一次 dom 更新后调用\n- 什么时候用：当数据改变，要基于更新后的新 dom 进行操作时，要在 nextTick 的回调函数里执行。\n\n##### Vue 封装的过渡与动画\n\n元素进入的样式\n\n- v-enter 进入的起点\n- v-enter-active 进入过程中\n- v-enter-to 进入的终点\n\n元素离开的样式\n\n- v-leave 离开的起点\n- v-leave-active 离开的过程中\n- V-leave-to 离开终点\n\n<transition name=\"xxx\"></transition>\n\n- xxx 对应 v-leave 的 v\n- appear 一开始进入时就有动画\n\n若有多个元素需要过渡，transition-group 每个元素加 key 值\n\n##### proxy 代理\n\n写在 vue.config.js\n\n第一种\n\n```\ndevServer:{\n\tproxy:'http://localhost:5000'//目标服务器\n}\n```\n\n缺点：这样写请求全部走了代理，不能控制哪些请求走代理。\n\n第二种\n\n```\ndevServer:{\n\tproxy:{\n\t\t'/api':{\n\t\t\ttarget:http://localhost:5000',\n\t\t\tpathRewrite:{'^/api':''}//去掉url的api\n\t\t\tws:true,//开启webSockst\n\t\t\tchangeOrigin:true,//你多大鞋我就多大的脚\n\t\t}\n\t}'\n}\n```\n\n##### es6...扩展操作符\n\n数组合并\n\n```js\n//es5\nlet book1 = [\"平凡的世界第一部\", \"平凡的世界第二部\", \"平凡的世界第三部\"];\nlet book2 = [\"人生\"];\nlet book3 = book1.concat(book2);\n//console.log(book3) // (4) [\"平凡的世界第一部\", \"平凡的世界第二部\", \"平凡的世界第三部\", \"人生\"]\n\n//es6\nlet book4 = [...book1, ...book2];\nbook4[3] = \"月夜静悄悄\";\nconsole.log(book4); //(4) [\"平凡的世界第一部\", \"平凡的世界第二部\", \"平凡的世界第三部\", \"月夜静悄悄\"]\n```\n\n对象合并\n\n```js\nlet obj1 = {\n  book1: \"平凡的世界第一部\",\n  book2: \"平凡的世界第二部\",\n  book3: \"平凡的世界第三部\",\n};\nlet obj2 = {\n  ...obj1,\n  book4: \"人生\",\n};\nconsole.log(obj2); //{book1: \"平凡的世界第一部\", book2: \"平凡的世界第二部\", book3: \"平凡的世界第三部\", book4: \"人生\"}\n\n//如后者与前者相同，后者覆盖前者\nlet obj1 = {\n  book1: \"平凡的世界第一部\",\n  book2: \"平凡的世界第二部\",\n  book3: \"平凡的世界第三部\",\n  book4: \"月夜静悄悄\",\n};\nlet obj2 = {\n  ...obj1,\n  book4: \"月夜静悄悄11111\",\n  book5: \"人生\",\n};\nconsole.log(obj2); //{book1: \"平凡的世界第一部\", book2: \"平凡的世界第二部\", book3: \"平凡的世界第三部\", book4: \"月夜静悄悄11111\", book5: \"人生\"}\n\nlet obj = { name: \"daisy\" };\nlet obj1 = { job: \"web\" };\nlet obj2 = { sex: 1 };\nlet obj5 = { ...obj, ...obj1, ...obj2 };\nconsole.log(obj5); //{name: \"daisy\", job: \"web\", sex: 1}\n\n//与Object.assign用法相同 Object.assign(target, ...sources)\nlet obj4 = Object.assign(obj, obj1, obj2);\nconsole.log(obj4); //{name: \"daisy\", job: \"web\", sex: 1}\nconsole.log(obj); //{name: \"daisy\", job: \"web\", sex: 1}  /**注意目标对象也会随之改变 */\n```\n\n##### 插槽\n\n1. 作用：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 <strong style=\"color:red\">父组件 ===> 子组件</strong> 。\n\n2. 分类：默认插槽、具名插槽、作用域插槽\n\n3. 使用方式：\n\n   默认插槽：\n\n```vue\n父组件中：\n<Category>\n           <div>html结构1</div>\n        </Category>\n子组件中：\n<template>\n  <div>\n    <!-- 定义插槽 -->\n    <slot>插槽默认内容...</slot>\n  </div>\n</template>\n```\n\n​ 具名插槽\n\n```vue\n父组件中：\n<Category>\n            <template slot=\"center\">\n              <div>html结构1</div>\n            </template>\n\n            <template v-slot:footer>\n               <div>html结构2</div>\n            </template>\n        </Category>\n子组件中：\n<template>\n  <div>\n    <!-- 定义插槽 -->\n    <slot name=\"center\">插槽默认内容...</slot>\n    <slot name=\"footer\">插槽默认内容...</slot>\n  </div>\n</template>\n```\n\n​ 作用域插槽\n\n```vue\n理解：\n<span\n  style=\"color:red\"\n>数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>\n（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）\n父组件中：\n<Category>\n\t\t\t<template scope=\"scopeData\">\n\t\t\t\t<!-- 生成的是ul列表 -->\n\t\t\t\t<ul>\n\t\t\t\t\t<li v-for=\"g in scopeData.games\" :key=\"g\">{{g}}</li>\n\t\t\t\t</ul>\n\t\t\t</template>\n\t\t</Category>\n\n<Category>\n\t\t\t<template slot-scope=\"scopeData\">\n\t\t\t\t<!-- 生成的是h4标题 -->\n\t\t\t\t<h4 v-for=\"g in scopeData.games\" :key=\"g\">{{g}}</h4>\n\t\t\t</template>\n\t\t</Category>\n子组件中：\n<template>\n  <div>\n    <slot :games=\"games\"></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Category\",\n  props: [\"title\"],\n  //数据在子组件自身\n  data() {\n    return {\n      games: [\"红色警戒\", \"穿越火线\", \"劲舞团\", \"超级玛丽\"],\n    };\n  },\n};\n</script>\n```\n\n## Vuex\n\n### 1.概念\n\n​ 在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。\n\n### 2.何时使用？\n\n​ 多个组件需要共享数据时\n\n### 3.搭建 vuex 环境\n\n1. 创建文件：`src/store/index.js`\n\n```js\n//引入Vue核心库\nimport Vue from \"vue\";\n//引入Vuex\nimport Vuex from \"vuex\";\n//应用Vuex插件\nVue.use(Vuex);\n\n//准备actions对象——响应组件中用户的动作\nconst actions = {};\n//准备mutations对象——修改state中的数据\nconst mutations = {};\n//准备state对象——保存具体的数据\nconst state = {};\n\n//创建并暴露store\nexport default new Vuex.Store({\n  actions,\n  mutations,\n  state,\n});\n```\n\n在`main.js`中创建 vm 时传入`store`配置项\n\n```js\n......\n//引入store\nimport store from './store'\n......\n\n//创建vm\nnew Vue({\n\tel:'#app',\n\trender: h => h(App),\n\tstore\n})\n```\n\n### 4.基本使用\n\n1. 初始化数据、配置`actions`、配置`mutations`，操作文件`store.js`\n\n```js\n//引入Vue核心库\nimport Vue from \"vue\";\n//引入Vuex\nimport Vuex from \"vuex\";\n//引用Vuex\nVue.use(Vuex);\n\nconst actions = {\n  //响应组件中加的动作\n  jia(context, value) {\n    // console.log('actions中的jia被调用了',miniStore,value)\n    context.commit(\"JIA\", value);\n  },\n};\n\nconst mutations = {\n  //执行加\n  JIA(state, value) {\n    // console.log('mutations中的JIA被调用了',state,value)\n    state.sum += value;\n  },\n};\n\n//初始化数据\nconst state = {\n  sum: 0,\n};\n\n//创建并暴露store\nexport default new Vuex.Store({\n  actions,\n  mutations,\n  state,\n});\n```\n\n1. 组件中读取 vuex 中的数据：`$store.state.sum`\n\n2. 组件中修改 vuex 中的数据：`$store.dispatch('action中的方法名',数据)` 或 `$store.commit('mutations中的方法名',数据)`\n\n   > 备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写`dispatch`，直接编写`commit`\n\n### 5.getters 的使用\n\n1. 概念：当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。\n\n2. 在`store.js`中追加`getters`配置\n\n```js\n......\n\nconst getters = {\n\tbigSum(state){\n\t\treturn state.sum * 10\n\t}\n}\n\n//创建并暴露store\nexport default new Vuex.Store({\n\t......\n\tgetters\n})\n```\n\n1. 组件中读取数据：`$store.getters.bigSum`\n\n### 6.四个 map 方法的使用\n\n1. <strong>mapState 方法：</strong>用于帮助我们映射`state`中的数据为计算属性\n\n```js\ncomputed: {\n    //借助mapState生成计算属性：sum、school、subject（对象写法）\n     ...mapState({sum:'sum',school:'school',subject:'subject'}),\n\n    //借助mapState生成计算属性：sum、school、subject（数组写法）\n    ...mapState(['sum','school','subject']),\n},\n```\n","source":"_posts/vue.md","raw":"title: VUE 2 & 3\ndate: 2021-4-20 14.37  \nmodified: 2021-4-20 14.37\ntag:\n\n- javascript\n\nphotos:\n\n- /images/3.jpg\n\n---\n\nvue 复习\n\n<!--more-->\n\n##### MVVM\n\nVUE 参考了 mvvm 架构模型，m（模型 model）data 中的数据，v（视图 view）模版，vm（视图模型 viewmodel）vue 实例对象\n\n但是 vue 中添加了一个属性。ref\n通过 ref 可以拿到 dom 对象，通过 ref 直接去操作视图。这一点上，违背了 mvvm\n\n##### 数据代理\n\n![](imgs/Snipaste_2021-11-16_23-33-59.png)\n\n这部分只做了数据代理，没有做数据劫持，也就是数据改变视图改变（响应式），其实\\_data 里面的属性 vue 有做数据劫持。\n\nVue2.x 是使用 Object.defindProperty()，来进行对对象的监听的，但是改变数组里的某个值不会触发 set，(如果要监听的到话，需要重新编写数组的方法)， 必须遍历每个对象的每个属性，如果对象嵌套很深的话，需要使用递归调用。\n\n##### 事件修饰符\n\n1.prevent:阻止默认事件（常用）\n\n2.stop：阻止时间冒泡（常用）\n\n3.once：事件只触发一次（常用）\n\n4.capture:使用事件的捕获模式\n\n5.self：只有 event.target 是当前操作元素才会触发事件\n\n6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕。（@scroll 滚动条事件用不到，@wheel 滚轮事件用到一般 c 端会用到）\n\nTips：可以使用链式写法@click.prevent.stop\n\n##### 键盘事件\n\n@keyup.enter=\"\"\n\n1.vue 常用的按键别名\n\n回车 enter\n\n删除 delete （退格和删除都能触发）\n\n退出 esc\n\n空格 space\n\n2.vue 为提供的按键，可以使用案件原始的 key 值去绑定，但注意转为短横线命名。\n\n3.系统修饰键用法比较特殊 最好配合 keydown 使用\n\n4.vue.config.keyCode.自定义键名 = 键码\n\nTips：可以使用链式写法@keyup.enter.y=\"\"意思是 enter 和 y 都要按才能触发\n\n##### 计算属性\n\n```js\n完整写法\ncomputed:{\n\tfullName:{\n\t\tget(){\n\t\t\treturn this.nameA+'-'this.nameB\n\t\t}\n\t\tset(value){\n\t\tconst arr = value.split('-')\n\t\tthis.nameA = arr[0]\n\t\tthis.nameB = arr[1]\n\t\t}\n\t}\n}\n简写（只用到get，用不到set的时候使用）\ncomputed:{\n\tfullName(){\n\t\treturn this.nameA+'-'this.nameB\n\t}\n}\n```\n\n##### 监视属性\n\n```js\ndata:{\n\tid:2,\n\tnumbers:{\n\t\ta:1,\n\t\tb:1\n\t}\n}\nwatch:{\n\tid:{\n\t\thandler(){\n\t\t\tconsole.log('a改变了')\n\t\t}\n\t}，\n\t//如果要监视多级结构中某个属性的变化可以这样写\n\t'numbers.a':{\n  \thandler(new,old){\n  \t\t\tconsole.log('a改变了')\n  \t}\n\t}，\n\t//监视多级结构所有属性的变化\n\tnumbers:{\n\t\timmediate:true,//初始化时让handler执行一次\n\t\tdeep:true,//深度监视\n\t\thandler(new,old){\n\t\tconsole.log('numbers改变了')\n\t\t}\n\t}\n}\n//简写（用不到deep，和immediate时使用）\nwatch:{\n\tid(new,old){\n\t\tconsole.log('id改变了')\n\t}\n}\n\nTips：\nvm.$watch('id',{\n\t\timmediate:true,//初始化时让handler执行一次\n\t\tdeep:true,//深度监视\n\t\thandler(n,o){\n\t\t}\n})\nvm.$watch('id',function(n,o){\nconsole.log('id改变了'，n,o)\n})\n```\n\n##### 计算属性和监听属性的区别\n\ncomputed 能完成的，watch 都能完成，watch 可以执行异步任务，computed 不行，computed 只有原始值发生变化，才会触发，具有缓存，watch 是数据改变就会触发。\n\nTips：所有被 vue 管理的函数嘴还写成普通函数，所有不被 vue 管理的函数最好写成箭头函数，这样 this 才是指向 vm 或组件实例对象。\n\n##### vue.set()\n\n##### 数据劫持\n\n```js\n//正常初始化data后，模版解析渲染页面，这个时候是响应式的，但是后面又想给data对象中追加数据，这个时候vue不做响应式，就像vue的bug。\n如果要给对象加属性，而且要响应式，要用\n1.vue.set(target,propertyName/index,value)或vm.$set(target,propertyName/index,value)\n2.但是vue.set和vm.$set不能给vm或vm根数据对象添加对象（Tips:不能给data直接添加属性 要再加一层结构）\n如果要修改数组中的某个元素一定要用如下方法不然不能响应式，可以使用这些vue包裹过的API push() shift() unshift() splice() sort() reverse()或者vm.$set() vue.set()\n```\n\n##### Es6\n\n``` js\n//形参默认值\ntest(a=\"1\"){\n\tconsole.log(a)\n}\ntest（）//1\ntest（2）//2\n```\n\n##### 管道符\n\n```js\n//和methods 同一层级的配置项\n常用在插值表达式中{{a | c}}\nmethods:{\n\n},\nfilter:{\n\tc(value){\n\t//value 会收到a\n\treturn a + 1\n\t}\n}\n```\n\n##### V-html\n\n向指定节点渲染包换 html 结构的内容\n\nv-html 可以识别 html 结构\n\nv-html 有安全性问题 不要在用户提交的内容上使用 容易导致 xxs 攻击\n\n##### v-clock\n\n直接写在标签里 <div v-clock/>\n\n使用 css 属性属性选择器[v-clock]{}可以解决因为网速满页面出现{{name}}情况\n\n当脚本跑起来时 vue 会删掉 v-clock 属性\n\n##### V-once\n\n只在初始化时解析一次 后面就视为静态内容 <div v-once/>\n\n##### 自定义指令\n\n```js\n1.v-自定义指令名\n\n2.写在配置项directives：{\n\n自定义指令名（element，binding）{\n\n\t\telement.innerText = binding.value * 10\n\n \t}\n\n}\n//如果需要处理一些逻辑时自定义指令写成对象形式\nfbind:{\n  //一上来调用，指令绑定时\n  bind(e,b){\n\n  },\n  //指令所在的元素被插入页面时\n  inserted(e,d){\n    //比如input获取焦点需要写在这里\n  },\n  //指令所在的模版被重新解析时\n   update(e,b){\n\n   }\n}\n\n3.初始化时调用一次，指令所在的模版被重新解析式调用。\n4.指令函数里的this指向window，而不是由vue管理的函数都指向vm，因为指令函数把元素传给你了，方便你操作dom\n```\n\n##### 生命周期\n\n```js\nbeforCreated 访问不到数据和方法，因为还没数据监听和数据代理\ncreated 初始化完成，数据和方法都可以访问 但是真实dom还没有挂载，一般写初始化数据，比如通过求返回的数据渲染页面，但是访问不到htmlelement\nbeforMount 挂载前，页面已经出来但是还未经vue编译，此时对dom操作都没有效果，因为下一步会将之前准备好的虚拟dom转换成真实dom，而不是你改完的dom\nmounted 数据，方法和dom都已经准好，一般在这里写需要等初始化页面完成后，再对html的dom节点操作的需求。如果在这里面写会更新dom需要用到的data数据时，比如根据借口返回值渲染页面，可能发生闪屏。\nbeforUpdate 数据已经更新，但是页面还没渲染\nupdated 页面渲染完成\nbeforDestory 实例销毁前，一般写收尾工作，比如消除定时器等。注意不要写操作数据，因为不会触发更新。\ndestory\n```\n\n##### vue 组件化\n\n```js\n有单文件组件和多文件组件,下面是单文件组件的配置写法，一般实际项目上不会用单文件组件，到vue开发工具里组件注册时的名字会变成首字母大写，如果不想用注册时的名字，可以加配置项name\n<script>\n      Vue.config.productionTip = false;\n      const msg = Vue.extend({\n        data() {\n          return {\n            msg: \"不是\",\n          };\n        },\n        template: `\n        <div>\n          <p>{{msg}}</p>\n          </div>\n        `,\n      });\n      const error1 = {\n        data() {\n          return {\n            error: \"错误\",\n          };\n        },\n        template: `\n        <p>{{error}}</p>\n        `,\n      };\n      const error = {\n        data() {\n          return {\n            error: \"是\",\n          };\n        },\n        template: `\n        <div>\n          <p>{{error}}</p>\n          <error1 />\n          </div>\n        `,\n        //组件嵌套\n        components: {\n          error1,\n        },\n      };\n\n      const vm = new Vue({\n        el: \"#app\",\n        components: {\n          error,\n          msg,\n        },\n        data() {\n          return {};\n        },\n        methods: {},\n        created() {},\n        mounted() {},\n      });\n    </script>\n```\n\nVueComponent\n\n```js\n//每一个组件其实就是VueComponent的实例对象，VueComponen是一个构造函数，由vue.extend生成的，也就是new出来的，每个组件里的this指VueComponent，我们写的组件，比如组件名叫school，使用时<school >，vue在解析的时候会帮我们创建new Vuecomponent(options)；\n```\n\n##### 内置关系\n\n```js\nVueComponent.property._proto_ === vue.property\n组件实例的原型对象默认zhii x指向vue原型对象，这样方便组件访问vue的属性和方法。组件实例的原型对象默认指向object原型对象，vue改变了它的指向。\n//Tips：所有函数实例的_proto_都指向缔造它的原型原型对象，property是显式的原型属性，_proto_是隐式的原型属性\n```\n\n##### 为什么 main.js 里要写成 render 函数\n\n```\nimport Vue from 'vue'实际上引入的是运行时vue，并不是完整版的vue，少了template解析器，因为webpack打包完后就不用template了,这样做节约了100多kb,最重要的打包后不需要用到template解析器代码。\n```\n\n##### props\n\n```\n功能：让组件接受外部传的数据\n传递数据\n<Demo name=\"xxx\"/>\n接受数据：\n第一种方式（只接收）\nprops:['name']\n第二种方式（限制类型）\nprops:{\nname:String\n}\n第三种方式（限制类型，限制是否必传，默认值）\nprops:[\n{name:String,required:true,default:'老王'}\n]\nTips：props是只读的，在组件内直接改prop会页面包错，需要在data中复制一份，myName:this.name\n```\n\n##### Mixin 混入\n\n```js\nexport defule {\n\tdata(){\n\n\t},\n\tmethods:{\n\n\t},\n\t//生命周期函数会都调用\n\tmounted(){\n\n\t}\n}\nimport mixins from './xxx'\n//局部混入\nmixins:['xxx']\n//全局混入\nVue.mixin(xxx)\n文件里有的，混入文件里也有，优先用文件里有的。\n```\n\n##### ES6 Module 及 CommonJS 的配对使用\n\n```js\nexport  function common(params) {\n  console.log(params)\n};\n\nexport let commcls=new class{\n  constructor(name,sex,age=27){\n    this.name=name;\n    this.sex=sex;\n    this.age=age;\n  }\n  GetName(){\n    return \"我的名字是\"+ this.name;\n  }\n  get Money(){\n    return \"我是属性钱，大家都爱我\"\n  }\n\n};\n\nexport  const pi=3.1415926;\n//这种写法是分别导出\n//按需导出的写法是去掉export，在最下面写上export {common,commcls,const}\n/**最常用的全部导出写法 export default{common:function common(params) {\n  console.log(params)\n}}写成键值对**/\n//以上有函数，js类，常量的导出\n\n导入\nimport {common,commcls} from './xxx'\nimport * as api from './xxx'\n\n导出\nmodule.exports = {\n    name: 'commonJS_exports.js',\n    add: function(a, b){\n        return a + b;\n    }\n}\n\n导入\nlet comObj = require('../api/module/commonJS_exports');\nlet {name} = require('../api/module/commonJS_exports');\n//在module对象中有一个属性loaded用于记录该模块是否被加载过，它的默认值为false，当模块第一次被加载和执行过后会设置为true，后面再次加载时检查到module.loaded为true, 则不会再次执行模块代码。require函数可以接收表达式，借助这个特性我们可以动态地指定模块加载路径\nconst moduleNames = ['foo.js', 'bar.js'];\nmoduleNames.forEach(name=>{\n   require('./' + name);\n})\n\nCommonJS和ES6 Module的区别\n//CommonJS模块依赖关系的建立发生在代码运行阶段,ES6 Module模块依赖关系的建立发生在代码编译阶段。前者可以动态指定require的模块路径，后者不行，但是可以冗余代码检测和排除，我们可以用静态分析工具分析工具检测出哪些模块没有被调用过，然后去掉这些模块，后者编译器程序效率更高。\n```\n\n###### 插件的使用\n\n```js\n创建一个plugins.js\nexport defulue{\n\tinstall(vue,x){\n\t\t//比如全局过滤器\n\t\tVue.filter(...)\n\t\t//全局混入\n\t\tVue.mixin(...)\n\t}\n}\n在main.js\nimport plugins from './plugins'\nVue.use(plugins,1)//可以传参\n\n```\n\n##### 组件传值\n\n```js\n1.父向子传值\n//父组件\n<Student :name=\"小明\"/>\n//自组件\nprops：[name]\n\n2.子向父传值\n(1)第一种\n//父组件\n\t<Student @getName=\"demo\"/>\n  //getName是自定义事件名称\n  methods:{\n    getName(name){\n      console.log(name)\n      //小明\n    }\n  }\n//子组件\n<button @clicl=\"sendName\"><button/>\n  data(){\n  return{\n    name:\"小明\"\n  }\n}\n\tmethods:{\n    sendName(){\n      //getName这里必须写的和在父组件里子组件标签上自定义事件名字一样\n      this.$emit('getName',this.name)\n      //解除绑定自定义事件\n      //this.$off('getName')\n    }\n  }\n(2)第二种\n//父组件\n<Student :getName=\"getName\"/>\n  //传一个函数给子组件\n  methods:{\n    getName(name){\n\n    }\n  }\n//子组件\n<button @clicl=\"sendName\"><button/>\ndata(){\n  return{\n    name:\"小明\"\n  }\n}\nprops：[getName]，\nmethods:{\n  sendName(){\n    this.getName(this.name)\n  }\n}\n(3)第三种\n//父组件\n<Student ref=\"Student\"/>\n  methods:{\n    getName(name){\n\n    }\n  }\n  mounted(){\n this.$refs.Student.$on('getName',this.getName)\n    //这种写法可以延迟绑定自定义事件\n}\n//子组件\n<button @clicl=\"sendName\"><button/>\n  data(){\n  return{\n    name:\"小明\"\n  }\n}\n\tmethods:{\n    sendName(){\n      this.$emit('getName',this.name)\n    }\n  }\n\n```\n\n##### $bus\n\n```js\n全局事件总线\n在main.js 里new Vue({\n...\nbeforCreated(){\n\tVue.prototype.$bus = this\n}\n})\nA组件接收数据\nmethods:{\n\tdemo(data){\n\n\t}\n},\nmounted(){\n\tthis.$bus.$on('xxx',this.demo)\n}\nB组件提供数据\nthis.$bus.$emit('xxx',this.data)\n```\n\n##### $nextTick\n\n- 作用：在下一次 dom 更新后调用\n- 什么时候用：当数据改变，要基于更新后的新 dom 进行操作时，要在 nextTick 的回调函数里执行。\n\n##### Vue 封装的过渡与动画\n\n元素进入的样式\n\n- v-enter 进入的起点\n- v-enter-active 进入过程中\n- v-enter-to 进入的终点\n\n元素离开的样式\n\n- v-leave 离开的起点\n- v-leave-active 离开的过程中\n- V-leave-to 离开终点\n\n<transition name=\"xxx\"></transition>\n\n- xxx 对应 v-leave 的 v\n- appear 一开始进入时就有动画\n\n若有多个元素需要过渡，transition-group 每个元素加 key 值\n\n##### proxy 代理\n\n写在 vue.config.js\n\n第一种\n\n```\ndevServer:{\n\tproxy:'http://localhost:5000'//目标服务器\n}\n```\n\n缺点：这样写请求全部走了代理，不能控制哪些请求走代理。\n\n第二种\n\n```\ndevServer:{\n\tproxy:{\n\t\t'/api':{\n\t\t\ttarget:http://localhost:5000',\n\t\t\tpathRewrite:{'^/api':''}//去掉url的api\n\t\t\tws:true,//开启webSockst\n\t\t\tchangeOrigin:true,//你多大鞋我就多大的脚\n\t\t}\n\t}'\n}\n```\n\n##### es6...扩展操作符\n\n数组合并\n\n```js\n//es5\nlet book1 = [\"平凡的世界第一部\", \"平凡的世界第二部\", \"平凡的世界第三部\"];\nlet book2 = [\"人生\"];\nlet book3 = book1.concat(book2);\n//console.log(book3) // (4) [\"平凡的世界第一部\", \"平凡的世界第二部\", \"平凡的世界第三部\", \"人生\"]\n\n//es6\nlet book4 = [...book1, ...book2];\nbook4[3] = \"月夜静悄悄\";\nconsole.log(book4); //(4) [\"平凡的世界第一部\", \"平凡的世界第二部\", \"平凡的世界第三部\", \"月夜静悄悄\"]\n```\n\n对象合并\n\n```js\nlet obj1 = {\n  book1: \"平凡的世界第一部\",\n  book2: \"平凡的世界第二部\",\n  book3: \"平凡的世界第三部\",\n};\nlet obj2 = {\n  ...obj1,\n  book4: \"人生\",\n};\nconsole.log(obj2); //{book1: \"平凡的世界第一部\", book2: \"平凡的世界第二部\", book3: \"平凡的世界第三部\", book4: \"人生\"}\n\n//如后者与前者相同，后者覆盖前者\nlet obj1 = {\n  book1: \"平凡的世界第一部\",\n  book2: \"平凡的世界第二部\",\n  book3: \"平凡的世界第三部\",\n  book4: \"月夜静悄悄\",\n};\nlet obj2 = {\n  ...obj1,\n  book4: \"月夜静悄悄11111\",\n  book5: \"人生\",\n};\nconsole.log(obj2); //{book1: \"平凡的世界第一部\", book2: \"平凡的世界第二部\", book3: \"平凡的世界第三部\", book4: \"月夜静悄悄11111\", book5: \"人生\"}\n\nlet obj = { name: \"daisy\" };\nlet obj1 = { job: \"web\" };\nlet obj2 = { sex: 1 };\nlet obj5 = { ...obj, ...obj1, ...obj2 };\nconsole.log(obj5); //{name: \"daisy\", job: \"web\", sex: 1}\n\n//与Object.assign用法相同 Object.assign(target, ...sources)\nlet obj4 = Object.assign(obj, obj1, obj2);\nconsole.log(obj4); //{name: \"daisy\", job: \"web\", sex: 1}\nconsole.log(obj); //{name: \"daisy\", job: \"web\", sex: 1}  /**注意目标对象也会随之改变 */\n```\n\n##### 插槽\n\n1. 作用：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 <strong style=\"color:red\">父组件 ===> 子组件</strong> 。\n\n2. 分类：默认插槽、具名插槽、作用域插槽\n\n3. 使用方式：\n\n   默认插槽：\n\n```vue\n父组件中：\n<Category>\n           <div>html结构1</div>\n        </Category>\n子组件中：\n<template>\n  <div>\n    <!-- 定义插槽 -->\n    <slot>插槽默认内容...</slot>\n  </div>\n</template>\n```\n\n​ 具名插槽\n\n```vue\n父组件中：\n<Category>\n            <template slot=\"center\">\n              <div>html结构1</div>\n            </template>\n\n            <template v-slot:footer>\n               <div>html结构2</div>\n            </template>\n        </Category>\n子组件中：\n<template>\n  <div>\n    <!-- 定义插槽 -->\n    <slot name=\"center\">插槽默认内容...</slot>\n    <slot name=\"footer\">插槽默认内容...</slot>\n  </div>\n</template>\n```\n\n​ 作用域插槽\n\n```vue\n理解：\n<span\n  style=\"color:red\"\n>数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>\n（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）\n父组件中：\n<Category>\n\t\t\t<template scope=\"scopeData\">\n\t\t\t\t<!-- 生成的是ul列表 -->\n\t\t\t\t<ul>\n\t\t\t\t\t<li v-for=\"g in scopeData.games\" :key=\"g\">{{g}}</li>\n\t\t\t\t</ul>\n\t\t\t</template>\n\t\t</Category>\n\n<Category>\n\t\t\t<template slot-scope=\"scopeData\">\n\t\t\t\t<!-- 生成的是h4标题 -->\n\t\t\t\t<h4 v-for=\"g in scopeData.games\" :key=\"g\">{{g}}</h4>\n\t\t\t</template>\n\t\t</Category>\n子组件中：\n<template>\n  <div>\n    <slot :games=\"games\"></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Category\",\n  props: [\"title\"],\n  //数据在子组件自身\n  data() {\n    return {\n      games: [\"红色警戒\", \"穿越火线\", \"劲舞团\", \"超级玛丽\"],\n    };\n  },\n};\n</script>\n```\n\n## Vuex\n\n### 1.概念\n\n​ 在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。\n\n### 2.何时使用？\n\n​ 多个组件需要共享数据时\n\n### 3.搭建 vuex 环境\n\n1. 创建文件：`src/store/index.js`\n\n```js\n//引入Vue核心库\nimport Vue from \"vue\";\n//引入Vuex\nimport Vuex from \"vuex\";\n//应用Vuex插件\nVue.use(Vuex);\n\n//准备actions对象——响应组件中用户的动作\nconst actions = {};\n//准备mutations对象——修改state中的数据\nconst mutations = {};\n//准备state对象——保存具体的数据\nconst state = {};\n\n//创建并暴露store\nexport default new Vuex.Store({\n  actions,\n  mutations,\n  state,\n});\n```\n\n在`main.js`中创建 vm 时传入`store`配置项\n\n```js\n......\n//引入store\nimport store from './store'\n......\n\n//创建vm\nnew Vue({\n\tel:'#app',\n\trender: h => h(App),\n\tstore\n})\n```\n\n### 4.基本使用\n\n1. 初始化数据、配置`actions`、配置`mutations`，操作文件`store.js`\n\n```js\n//引入Vue核心库\nimport Vue from \"vue\";\n//引入Vuex\nimport Vuex from \"vuex\";\n//引用Vuex\nVue.use(Vuex);\n\nconst actions = {\n  //响应组件中加的动作\n  jia(context, value) {\n    // console.log('actions中的jia被调用了',miniStore,value)\n    context.commit(\"JIA\", value);\n  },\n};\n\nconst mutations = {\n  //执行加\n  JIA(state, value) {\n    // console.log('mutations中的JIA被调用了',state,value)\n    state.sum += value;\n  },\n};\n\n//初始化数据\nconst state = {\n  sum: 0,\n};\n\n//创建并暴露store\nexport default new Vuex.Store({\n  actions,\n  mutations,\n  state,\n});\n```\n\n1. 组件中读取 vuex 中的数据：`$store.state.sum`\n\n2. 组件中修改 vuex 中的数据：`$store.dispatch('action中的方法名',数据)` 或 `$store.commit('mutations中的方法名',数据)`\n\n   > 备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写`dispatch`，直接编写`commit`\n\n### 5.getters 的使用\n\n1. 概念：当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。\n\n2. 在`store.js`中追加`getters`配置\n\n```js\n......\n\nconst getters = {\n\tbigSum(state){\n\t\treturn state.sum * 10\n\t}\n}\n\n//创建并暴露store\nexport default new Vuex.Store({\n\t......\n\tgetters\n})\n```\n\n1. 组件中读取数据：`$store.getters.bigSum`\n\n### 6.四个 map 方法的使用\n\n1. <strong>mapState 方法：</strong>用于帮助我们映射`state`中的数据为计算属性\n\n```js\ncomputed: {\n    //借助mapState生成计算属性：sum、school、subject（对象写法）\n     ...mapState({sum:'sum',school:'school',subject:'subject'}),\n\n    //借助mapState生成计算属性：sum、school、subject（数组写法）\n    ...mapState(['sum','school','subject']),\n},\n```\n","slug":"vue","published":1,"updated":"2025-04-23T02:01:28.018Z","comments":1,"layout":"post","link":"","_id":"cm9tan15k0003rxrcgy5c2bpw","content":"<p>vue 复习</p>\n<a id=\"more\"></a>\n\n<h5 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h5><p>VUE 参考了 mvvm 架构模型，m（模型 model）data 中的数据，v（视图 view）模版，vm（视图模型 viewmodel）vue 实例对象</p>\n<p>但是 vue 中添加了一个属性。ref<br>通过 ref 可以拿到 dom 对象，通过 ref 直接去操作视图。这一点上，违背了 mvvm</p>\n<h5 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h5><p><img src=\"imgs/Snipaste_2021-11-16_23-33-59.png\"></p>\n<p>这部分只做了数据代理，没有做数据劫持，也就是数据改变视图改变（响应式），其实_data 里面的属性 vue 有做数据劫持。</p>\n<p>Vue2.x 是使用 Object.defindProperty()，来进行对对象的监听的，但是改变数组里的某个值不会触发 set，(如果要监听的到话，需要重新编写数组的方法)， 必须遍历每个对象的每个属性，如果对象嵌套很深的话，需要使用递归调用。</p>\n<h5 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h5><p>1.prevent:阻止默认事件（常用）</p>\n<p>2.stop：阻止时间冒泡（常用）</p>\n<p>3.once：事件只触发一次（常用）</p>\n<p>4.capture:使用事件的捕获模式</p>\n<p>5.self：只有 event.target 是当前操作元素才会触发事件</p>\n<p>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕。（@scroll 滚动条事件用不到，@wheel 滚轮事件用到一般 c 端会用到）</p>\n<p>Tips：可以使用链式写法@click.prevent.stop</p>\n<h5 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h5><p>@keyup.enter=””</p>\n<p>1.vue 常用的按键别名</p>\n<p>回车 enter</p>\n<p>删除 delete （退格和删除都能触发）</p>\n<p>退出 esc</p>\n<p>空格 space</p>\n<p>2.vue 为提供的按键，可以使用案件原始的 key 值去绑定，但注意转为短横线命名。</p>\n<p>3.系统修饰键用法比较特殊 最好配合 keydown 使用</p>\n<p>4.vue.config.keyCode.自定义键名 = 键码</p>\n<p>Tips：可以使用链式写法@keyup.enter.y=””意思是 enter 和 y 都要按才能触发</p>\n<h5 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">完整写法</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tfullName:&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nameA+<span class=\"string\">'-'</span><span class=\"keyword\">this</span>.nameB</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span>(value)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> arr = value.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.nameA = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.nameB = arr[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">简写（只用到<span class=\"keyword\">get</span>，用不到<span class=\"keyword\">set</span>的时候使用）</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tfullName()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nameA+<span class=\"string\">'-'</span><span class=\"keyword\">this</span>.nameB</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"监视属性\"><a href=\"#监视属性\" class=\"headerlink\" title=\"监视属性\"></a>监视属性</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:&#123;</span><br><span class=\"line\">\tid:<span class=\"number\">2</span>,</span><br><span class=\"line\">\tnumbers:&#123;</span><br><span class=\"line\">\t\ta:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tb:<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">\tid:&#123;</span><br><span class=\"line\">\t\thandler()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a改变了'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\t<span class=\"comment\">//如果要监视多级结构中某个属性的变化可以这样写</span></span><br><span class=\"line\">\t<span class=\"string\">'numbers.a'</span>:&#123;</span><br><span class=\"line\">  \thandler(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">  \t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a改变了'</span>)</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\t<span class=\"comment\">//监视多级结构所有属性的变化</span></span><br><span class=\"line\">\tnumbers:&#123;</span><br><span class=\"line\">\t\timmediate:<span class=\"literal\">true</span>,<span class=\"comment\">//初始化时让handler执行一次</span></span><br><span class=\"line\">\t\tdeep:<span class=\"literal\">true</span>,<span class=\"comment\">//深度监视</span></span><br><span class=\"line\">\t\thandler(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'numbers改变了'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//简写（用不到deep，和immediate时使用）</span></span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">\tid(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'id改变了'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Tips：</span><br><span class=\"line\">vm.$watch(<span class=\"string\">'id'</span>,&#123;</span><br><span class=\"line\">\t\timmediate:<span class=\"literal\">true</span>,<span class=\"comment\">//初始化时让handler执行一次</span></span><br><span class=\"line\">\t\tdeep:<span class=\"literal\">true</span>,<span class=\"comment\">//深度监视</span></span><br><span class=\"line\">\t\thandler(n,o)&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.$watch(<span class=\"string\">'id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n,o</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'id改变了'</span>，n,o)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"计算属性和监听属性的区别\"><a href=\"#计算属性和监听属性的区别\" class=\"headerlink\" title=\"计算属性和监听属性的区别\"></a>计算属性和监听属性的区别</h5><p>computed 能完成的，watch 都能完成，watch 可以执行异步任务，computed 不行，computed 只有原始值发生变化，才会触发，具有缓存，watch 是数据改变就会触发。</p>\n<p>Tips：所有被 vue 管理的函数嘴还写成普通函数，所有不被 vue 管理的函数最好写成箭头函数，这样 this 才是指向 vm 或组件实例对象。</p>\n<h5 id=\"vue-set\"><a href=\"#vue-set\" class=\"headerlink\" title=\"vue.set()\"></a>vue.set()</h5><h5 id=\"数据劫持\"><a href=\"#数据劫持\" class=\"headerlink\" title=\"数据劫持\"></a>数据劫持</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正常初始化data后，模版解析渲染页面，这个时候是响应式的，但是后面又想给data对象中追加数据，这个时候vue不做响应式，就像vue的bug。</span></span><br><span class=\"line\">如果要给对象加属性，而且要响应式，要用</span><br><span class=\"line\"><span class=\"number\">1.</span>vue.set(target,propertyName/index,value)或vm.$<span class=\"keyword\">set</span>(target,propertyName/index,value)</span><br><span class=\"line\">2.但是vue.<span class=\"keyword\">set</span>和vm.$<span class=\"keyword\">set</span>不能给vm或vm根数据对象添加对象（Tips:不能给data直接添加属性 要再加一层结构）</span><br><span class=\"line\">如果要修改数组中的某个元素一定要用如下方法不然不能响应式，可以使用这些vue包裹过的API push() shift() unshift() splice() sort() reverse()或者vm.$<span class=\"keyword\">set</span>() vue.<span class=\"keyword\">set</span>()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Es6\"><a href=\"#Es6\" class=\"headerlink\" title=\"Es6\"></a>Es6</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形参默认值</span></span><br><span class=\"line\">test(a=<span class=\"string\">\"1\"</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test（）<span class=\"comment\">//1</span></span><br><span class=\"line\">test（<span class=\"number\">2</span>）<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"管道符\"><a href=\"#管道符\" class=\"headerlink\" title=\"管道符\"></a>管道符</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//和methods 同一层级的配置项</span></span><br><span class=\"line\">常用在插值表达式中&#123;&#123;a | c&#125;&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">filter:&#123;</span><br><span class=\"line\">\tc(value)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//value 会收到a</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"V-html\"><a href=\"#V-html\" class=\"headerlink\" title=\"V-html\"></a>V-html</h5><p>向指定节点渲染包换 html 结构的内容</p>\n<p>v-html 可以识别 html 结构</p>\n<p>v-html 有安全性问题 不要在用户提交的内容上使用 容易导致 xxs 攻击</p>\n<h5 id=\"v-clock\"><a href=\"#v-clock\" class=\"headerlink\" title=\"v-clock\"></a>v-clock</h5><p>直接写在标签里 <div v-clock/></p>\n<p>使用 css 属性属性选择器[v-clock]{}可以解决因为网速满页面出现情况</p>\n<p>当脚本跑起来时 vue 会删掉 v-clock 属性</p>\n<h5 id=\"V-once\"><a href=\"#V-once\" class=\"headerlink\" title=\"V-once\"></a>V-once</h5><p>只在初始化时解析一次 后面就视为静态内容 <div v-once/></p>\n<h5 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>v-自定义指令名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>写在配置项directives：&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">自定义指令名（element，binding）&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\telement.innerText = binding.value * <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果需要处理一些逻辑时自定义指令写成对象形式</span></span><br><span class=\"line\">fbind:&#123;</span><br><span class=\"line\">  <span class=\"comment\">//一上来调用，指令绑定时</span></span><br><span class=\"line\">  bind(e,b)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//指令所在的元素被插入页面时</span></span><br><span class=\"line\">  inserted(e,d)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//比如input获取焦点需要写在这里</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//指令所在的模版被重新解析时</span></span><br><span class=\"line\">   update(e,b)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>初始化时调用一次，指令所在的模版被重新解析式调用。</span><br><span class=\"line\"><span class=\"number\">4.</span>指令函数里的<span class=\"keyword\">this</span>指向<span class=\"built_in\">window</span>，而不是由vue管理的函数都指向vm，因为指令函数把元素传给你了，方便你操作dom</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforCreated 访问不到数据和方法，因为还没数据监听和数据代理</span><br><span class=\"line\">created 初始化完成，数据和方法都可以访问 但是真实dom还没有挂载，一般写初始化数据，比如通过求返回的数据渲染页面，但是访问不到htmlelement</span><br><span class=\"line\">beforMount 挂载前，页面已经出来但是还未经vue编译，此时对dom操作都没有效果，因为下一步会将之前准备好的虚拟dom转换成真实dom，而不是你改完的dom</span><br><span class=\"line\">mounted 数据，方法和dom都已经准好，一般在这里写需要等初始化页面完成后，再对html的dom节点操作的需求。如果在这里面写会更新dom需要用到的data数据时，比如根据借口返回值渲染页面，可能发生闪屏。</span><br><span class=\"line\">beforUpdate 数据已经更新，但是页面还没渲染</span><br><span class=\"line\">updated 页面渲染完成</span><br><span class=\"line\">beforDestory 实例销毁前，一般写收尾工作，比如消除定时器等。注意不要写操作数据，因为不会触发更新。</span><br><span class=\"line\">destory</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue-组件化\"><a href=\"#vue-组件化\" class=\"headerlink\" title=\"vue 组件化\"></a>vue 组件化</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有单文件组件和多文件组件,下面是单文件组件的配置写法，一般实际项目上不会用单文件组件，到vue开发工具里组件注册时的名字会变成首字母大写，如果不想用注册时的名字，可以加配置项name</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> msg = Vue.extend(&#123;</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            msg: <span class=\"string\">\"不是\"</span>,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> error1 = &#123;</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            error: <span class=\"string\">\"错误\"</span>,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;&#123;&#123;error&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> error = &#123;</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            error: <span class=\"string\">\"是\"</span>,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;p&gt;&#123;&#123;error&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;error1 /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>,</span><br><span class=\"line\">        <span class=\"comment\">//组件嵌套</span></span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">          error1,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">          error,</span><br><span class=\"line\">          msg,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;&#125;,</span><br><span class=\"line\">        created() &#123;&#125;,</span><br><span class=\"line\">        mounted() &#123;&#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>VueComponent</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//每一个组件其实就是VueComponent的实例对象，VueComponen是一个构造函数，由vue.extend生成的，也就是new出来的，每个组件里的this指VueComponent，我们写的组件，比如组件名叫school，使用时&lt;school &gt;，vue在解析的时候会帮我们创建new Vuecomponent(options)；</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内置关系\"><a href=\"#内置关系\" class=\"headerlink\" title=\"内置关系\"></a>内置关系</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VueComponent.property._proto_ === vue.property</span><br><span class=\"line\">组件实例的原型对象默认zhii x指向vue原型对象，这样方便组件访问vue的属性和方法。组件实例的原型对象默认指向object原型对象，vue改变了它的指向。</span><br><span class=\"line\"><span class=\"comment\">//Tips：所有函数实例的_proto_都指向缔造它的原型原型对象，property是显式的原型属性，_proto_是隐式的原型属性</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"为什么-main-js-里要写成-render-函数\"><a href=\"#为什么-main-js-里要写成-render-函数\" class=\"headerlink\" title=\"为什么 main.js 里要写成 render 函数\"></a>为什么 main.js 里要写成 render 函数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#39;vue&#39;实际上引入的是运行时vue，并不是完整版的vue，少了template解析器，因为webpack打包完后就不用template了,这样做节约了100多kb,最重要的打包后不需要用到template解析器代码。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">功能：让组件接受外部传的数据</span><br><span class=\"line\">传递数据</span><br><span class=\"line\">&lt;Demo name&#x3D;&quot;xxx&quot;&#x2F;&gt;</span><br><span class=\"line\">接受数据：</span><br><span class=\"line\">第一种方式（只接收）</span><br><span class=\"line\">props:[&#39;name&#39;]</span><br><span class=\"line\">第二种方式（限制类型）</span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">name:String</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">第三种方式（限制类型，限制是否必传，默认值）</span><br><span class=\"line\">props:[</span><br><span class=\"line\">&#123;name:String,required:true,default:&#39;老王&#39;&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">Tips：props是只读的，在组件内直接改prop会页面包错，需要在data中复制一份，myName:this.name</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Mixin-混入\"><a href=\"#Mixin-混入\" class=\"headerlink\" title=\"Mixin 混入\"></a>Mixin 混入</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> defule &#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//生命周期函数会都调用</span></span><br><span class=\"line\">\tmounted()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> mixins <span class=\"keyword\">from</span> <span class=\"string\">'./xxx'</span></span><br><span class=\"line\"><span class=\"comment\">//局部混入</span></span><br><span class=\"line\">mixins:[<span class=\"string\">'xxx'</span>]</span><br><span class=\"line\"><span class=\"comment\">//全局混入</span></span><br><span class=\"line\">Vue.mixin(xxx)</span><br><span class=\"line\">文件里有的，混入文件里也有，优先用文件里有的。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ES6-Module-及-CommonJS-的配对使用\"><a href=\"#ES6-Module-及-CommonJS-的配对使用\" class=\"headerlink\" title=\"ES6 Module 及 CommonJS 的配对使用\"></a>ES6 Module 及 CommonJS 的配对使用</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">common</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> commcls=<span class=\"keyword\">new</span> <span class=\"class\"><span class=\"keyword\">class</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name,sex,age=27)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sex=sex;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  GetName()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"我的名字是\"</span>+ <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> Money()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"我是属性钱，大家都爱我\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"keyword\">const</span> pi=<span class=\"number\">3.1415926</span>;</span><br><span class=\"line\"><span class=\"comment\">//这种写法是分别导出</span></span><br><span class=\"line\"><span class=\"comment\">//按需导出的写法是去掉export，在最下面写上export &#123;common,commcls,const&#125;</span></span><br><span class=\"line\"><span class=\"comment\">/**最常用的全部导出写法 export default&#123;common:function common(params) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  console.log(params)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;&#125;写成键值对**/</span></span><br><span class=\"line\"><span class=\"comment\">//以上有函数，js类，常量的导出</span></span><br><span class=\"line\"></span><br><span class=\"line\">导入</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;common,commcls&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./xxx'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> api <span class=\"keyword\">from</span> <span class=\"string\">'./xxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\">导出</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'commonJS_exports.js'</span>,</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">导入</span><br><span class=\"line\"><span class=\"keyword\">let</span> comObj = <span class=\"built_in\">require</span>(<span class=\"string\">'../api/module/commonJS_exports'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'../api/module/commonJS_exports'</span>);</span><br><span class=\"line\"><span class=\"comment\">//在module对象中有一个属性loaded用于记录该模块是否被加载过，它的默认值为false，当模块第一次被加载和执行过后会设置为true，后面再次加载时检查到module.loaded为true, 则不会再次执行模块代码。require函数可以接收表达式，借助这个特性我们可以动态地指定模块加载路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleNames = [<span class=\"string\">'foo.js'</span>, <span class=\"string\">'bar.js'</span>];</span><br><span class=\"line\">moduleNames.forEach(<span class=\"function\"><span class=\"params\">name</span>=&gt;</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">require</span>(<span class=\"string\">'./'</span> + name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">CommonJS和ES6 Module的区别</span><br><span class=\"line\"><span class=\"comment\">//CommonJS模块依赖关系的建立发生在代码运行阶段,ES6 Module模块依赖关系的建立发生在代码编译阶段。前者可以动态指定require的模块路径，后者不行，但是可以冗余代码检测和排除，我们可以用静态分析工具分析工具检测出哪些模块没有被调用过，然后去掉这些模块，后者编译器程序效率更高。</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"插件的使用\"><a href=\"#插件的使用\" class=\"headerlink\" title=\"插件的使用\"></a>插件的使用</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个plugins.js</span><br><span class=\"line\"><span class=\"keyword\">export</span> defulue&#123;</span><br><span class=\"line\">\tinstall(vue,x)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//比如全局过滤器</span></span><br><span class=\"line\">\t\tVue.filter(...)</span><br><span class=\"line\">\t\t<span class=\"comment\">//全局混入</span></span><br><span class=\"line\">\t\tVue.mixin(...)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">在main.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> plugins <span class=\"keyword\">from</span> <span class=\"string\">'./plugins'</span></span><br><span class=\"line\">Vue.use(plugins,<span class=\"number\">1</span>)<span class=\"comment\">//可以传参</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"组件传值\"><a href=\"#组件传值\" class=\"headerlink\" title=\"组件传值\"></a>组件传值</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>父向子传值</span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;Student :name=<span class=\"string\">\"小明\"</span>/&gt;</span><br><span class=\"line\"><span class=\"comment\">//自组件</span></span><br><span class=\"line\">props：[name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>子向父传值</span><br><span class=\"line\">(<span class=\"number\">1</span>)第一种</span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">\t&lt;Student @getName=<span class=\"string\">\"demo\"</span>/&gt;</span><br><span class=\"line\">  <span class=\"comment\">//getName是自定义事件名称</span></span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    getName(name)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">      <span class=\"comment\">//小明</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;button @clicl=<span class=\"string\">\"sendName\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>/&gt;</span></span></span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"小明\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">    sendName()&#123;</span><br><span class=\"line\">      <span class=\"comment\">//getName这里必须写的和在父组件里子组件标签上自定义事件名字一样</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'getName'</span>,<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">      <span class=\"comment\">//解除绑定自定义事件</span></span><br><span class=\"line\">      <span class=\"comment\">//this.$off('getName')</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">(<span class=\"number\">2</span>)第二种</span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;Student :getName=<span class=\"string\">\"getName\"</span>/&gt;</span><br><span class=\"line\">  <span class=\"comment\">//传一个函数给子组件</span></span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    getName(name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;button @clicl=<span class=\"string\">\"sendName\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>/&gt;</span></span></span><br><span class=\"line\">data()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"小明\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">props：[getName]，</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  sendName()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"number\">3</span>)第三种</span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;Student ref=<span class=\"string\">\"Student\"</span>/&gt;</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    getName(name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  mounted()&#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.$refs.Student.$on(<span class=\"string\">'getName'</span>,<span class=\"keyword\">this</span>.getName)</span><br><span class=\"line\">    <span class=\"comment\">//这种写法可以延迟绑定自定义事件</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;button @clicl=<span class=\"string\">\"sendName\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>/&gt;</span></span></span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"小明\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">    sendName()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'getName'</span>,<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"bus\"><a href=\"#bus\" class=\"headerlink\" title=\"$bus\"></a>$bus</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局事件总线</span><br><span class=\"line\">在main.js 里<span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">beforCreated()&#123;</span><br><span class=\"line\">\tVue.prototype.$bus = <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">A组件接收数据</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">\tdemo(data)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$bus.$on(<span class=\"string\">'xxx'</span>,<span class=\"keyword\">this</span>.demo)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B组件提供数据</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$bus.$emit(<span class=\"string\">'xxx'</span>,<span class=\"keyword\">this</span>.data)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"$nextTick\"></a>$nextTick</h5><ul>\n<li>作用：在下一次 dom 更新后调用</li>\n<li>什么时候用：当数据改变，要基于更新后的新 dom 进行操作时，要在 nextTick 的回调函数里执行。</li>\n</ul>\n<h5 id=\"Vue-封装的过渡与动画\"><a href=\"#Vue-封装的过渡与动画\" class=\"headerlink\" title=\"Vue 封装的过渡与动画\"></a>Vue 封装的过渡与动画</h5><p>元素进入的样式</p>\n<ul>\n<li>v-enter 进入的起点</li>\n<li>v-enter-active 进入过程中</li>\n<li>v-enter-to 进入的终点</li>\n</ul>\n<p>元素离开的样式</p>\n<ul>\n<li>v-leave 离开的起点</li>\n<li>v-leave-active 离开的过程中</li>\n<li>V-leave-to 离开终点</li>\n</ul>\n<p><transition name=\"xxx\"></transition></p>\n<ul>\n<li>xxx 对应 v-leave 的 v</li>\n<li>appear 一开始进入时就有动画</li>\n</ul>\n<p>若有多个元素需要过渡，transition-group 每个元素加 key 值</p>\n<h5 id=\"proxy-代理\"><a href=\"#proxy-代理\" class=\"headerlink\" title=\"proxy 代理\"></a>proxy 代理</h5><p>写在 vue.config.js</p>\n<p>第一种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">\tproxy:&#39;http:&#x2F;&#x2F;localhost:5000&#39;&#x2F;&#x2F;目标服务器</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>缺点：这样写请求全部走了代理，不能控制哪些请求走代理。</p>\n<p>第二种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">\tproxy:&#123;</span><br><span class=\"line\">\t\t&#39;&#x2F;api&#39;:&#123;</span><br><span class=\"line\">\t\t\ttarget:http:&#x2F;&#x2F;localhost:5000&#39;,</span><br><span class=\"line\">\t\t\tpathRewrite:&#123;&#39;^&#x2F;api&#39;:&#39;&#39;&#125;&#x2F;&#x2F;去掉url的api</span><br><span class=\"line\">\t\t\tws:true,&#x2F;&#x2F;开启webSockst</span><br><span class=\"line\">\t\t\tchangeOrigin:true,&#x2F;&#x2F;你多大鞋我就多大的脚</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"es6…扩展操作符\"><a href=\"#es6…扩展操作符\" class=\"headerlink\" title=\"es6…扩展操作符\"></a>es6…扩展操作符</h5><p>数组合并</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> book1 = [<span class=\"string\">\"平凡的世界第一部\"</span>, <span class=\"string\">\"平凡的世界第二部\"</span>, <span class=\"string\">\"平凡的世界第三部\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> book2 = [<span class=\"string\">\"人生\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> book3 = book1.concat(book2);</span><br><span class=\"line\"><span class=\"comment\">//console.log(book3) // (4) [\"平凡的世界第一部\", \"平凡的世界第二部\", \"平凡的世界第三部\", \"人生\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> book4 = [...book1, ...book2];</span><br><span class=\"line\">book4[<span class=\"number\">3</span>] = <span class=\"string\">\"月夜静悄悄\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(book4); <span class=\"comment\">//(4) [\"平凡的世界第一部\", \"平凡的世界第二部\", \"平凡的世界第三部\", \"月夜静悄悄\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>对象合并</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  book1: <span class=\"string\">\"平凡的世界第一部\"</span>,</span><br><span class=\"line\">  book2: <span class=\"string\">\"平凡的世界第二部\"</span>,</span><br><span class=\"line\">  book3: <span class=\"string\">\"平凡的世界第三部\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  ...obj1,</span><br><span class=\"line\">  book4: <span class=\"string\">\"人生\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//&#123;book1: \"平凡的世界第一部\", book2: \"平凡的世界第二部\", book3: \"平凡的世界第三部\", book4: \"人生\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如后者与前者相同，后者覆盖前者</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  book1: <span class=\"string\">\"平凡的世界第一部\"</span>,</span><br><span class=\"line\">  book2: <span class=\"string\">\"平凡的世界第二部\"</span>,</span><br><span class=\"line\">  book3: <span class=\"string\">\"平凡的世界第三部\"</span>,</span><br><span class=\"line\">  book4: <span class=\"string\">\"月夜静悄悄\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  ...obj1,</span><br><span class=\"line\">  book4: <span class=\"string\">\"月夜静悄悄11111\"</span>,</span><br><span class=\"line\">  book5: <span class=\"string\">\"人生\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//&#123;book1: \"平凡的世界第一部\", book2: \"平凡的世界第二部\", book3: \"平凡的世界第三部\", book4: \"月夜静悄悄11111\", book5: \"人生\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"daisy\"</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">job</span>: <span class=\"string\">\"web\"</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123; <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj5 = &#123; ...obj, ...obj1, ...obj2 &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj5); <span class=\"comment\">//&#123;name: \"daisy\", job: \"web\", sex: 1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//与Object.assign用法相同 Object.assign(target, ...sources)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj4 = <span class=\"built_in\">Object</span>.assign(obj, obj1, obj2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj4); <span class=\"comment\">//&#123;name: \"daisy\", job: \"web\", sex: 1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">//&#123;name: \"daisy\", job: \"web\", sex: 1&#125;  /**注意目标对象也会随之改变 */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h5><ol>\n<li><p>作用：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 <strong style=\"color:red\">父组件 ===&gt; 子组件</strong> 。</p>\n</li>\n<li><p>分类：默认插槽、具名插槽、作用域插槽</p>\n</li>\n<li><p>使用方式：</p>\n<p>默认插槽：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">&lt;Category&gt;</span><br><span class=\"line\">           &lt;div&gt;html结构1&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;&#x2F;Category&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;!-- 定义插槽 --&gt;</span><br><span class=\"line\">    &lt;slot&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​ 具名插槽</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">&lt;Category&gt;</span><br><span class=\"line\">            &lt;template slot&#x3D;&quot;center&quot;&gt;</span><br><span class=\"line\">              &lt;div&gt;html结构1&lt;&#x2F;div&gt;</span><br><span class=\"line\">            &lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;template v-slot:footer&gt;</span><br><span class=\"line\">               &lt;div&gt;html结构2&lt;&#x2F;div&gt;</span><br><span class=\"line\">            &lt;&#x2F;template&gt;</span><br><span class=\"line\">        &lt;&#x2F;Category&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;!-- 定义插槽 --&gt;</span><br><span class=\"line\">    &lt;slot name&#x3D;&quot;center&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class=\"line\">    &lt;slot name&#x3D;&quot;footer&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​ 作用域插槽</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">理解：</span><br><span class=\"line\">&lt;span</span><br><span class=\"line\">  style&#x3D;&quot;color:red&quot;</span><br><span class=\"line\">&gt;数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。&lt;&#x2F;span&gt;</span><br><span class=\"line\">（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</span><br><span class=\"line\">父组件中：</span><br><span class=\"line\">&lt;Category&gt;</span><br><span class=\"line\">\t\t\t&lt;template scope&#x3D;&quot;scopeData&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;!-- 生成的是ul列表 --&gt;</span><br><span class=\"line\">\t\t\t\t&lt;ul&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;li v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;ul&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;template&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;Category&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Category&gt;</span><br><span class=\"line\">\t\t\t&lt;template slot-scope&#x3D;&quot;scopeData&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;!-- 生成的是h4标题 --&gt;</span><br><span class=\"line\">\t\t\t\t&lt;h4 v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;template&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;Category&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;slot :games&#x3D;&quot;games&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;Category&quot;,</span><br><span class=\"line\">  props: [&quot;title&quot;],</span><br><span class=\"line\">  &#x2F;&#x2F;数据在子组件自身</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      games: [&quot;红色警戒&quot;, &quot;穿越火线&quot;, &quot;劲舞团&quot;, &quot;超级玛丽&quot;],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h2><h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><p>​ 在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>\n<h3 id=\"2-何时使用？\"><a href=\"#2-何时使用？\" class=\"headerlink\" title=\"2.何时使用？\"></a>2.何时使用？</h3><p>​ 多个组件需要共享数据时</p>\n<h3 id=\"3-搭建-vuex-环境\"><a href=\"#3-搭建-vuex-环境\" class=\"headerlink\" title=\"3.搭建 vuex 环境\"></a>3.搭建 vuex 环境</h3><ol>\n<li>创建文件：<code>src/store/index.js</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入Vue核心库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//引入Vuex</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">\"vuex\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//应用Vuex插件</span></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//准备actions对象——响应组件中用户的动作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//准备mutations对象——修改state中的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//准备state对象——保存具体的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在<code>main.js</code>中创建 vm 时传入<code>store</code>配置项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">//引入store</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建vm</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">\trender: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">\tstore</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-基本使用\"><a href=\"#4-基本使用\" class=\"headerlink\" title=\"4.基本使用\"></a>4.基本使用</h3><ol>\n<li>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入Vue核心库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//引入Vuex</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">\"vuex\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//引用Vuex</span></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//响应组件中加的动作</span></span><br><span class=\"line\">  jia(context, value) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log('actions中的jia被调用了',miniStore,value)</span></span><br><span class=\"line\">    context.commit(<span class=\"string\">\"JIA\"</span>, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//执行加</span></span><br><span class=\"line\">  JIA(state, value) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log('mutations中的JIA被调用了',state,value)</span></span><br><span class=\"line\">    state.sum += value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  sum: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>组件中读取 vuex 中的数据：<code>$store.state.sum</code></p>\n</li>\n<li><p>组件中修改 vuex 中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p>\n<blockquote>\n<p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"5-getters-的使用\"><a href=\"#5-getters-的使用\" class=\"headerlink\" title=\"5.getters 的使用\"></a>5.getters 的使用</h3><ol>\n<li><p>概念：当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。</p>\n</li>\n<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">\tbigSum(state)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.sum * <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\tgetters</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>组件中读取数据：<code>$store.getters.bigSum</code></li>\n</ol>\n<h3 id=\"6-四个-map-方法的使用\"><a href=\"#6-四个-map-方法的使用\" class=\"headerlink\" title=\"6.四个 map 方法的使用\"></a>6.四个 map 方法的使用</h3><ol>\n<li><strong>mapState 方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class=\"line\">     ...mapState(&#123;<span class=\"attr\">sum</span>:<span class=\"string\">'sum'</span>,<span class=\"attr\">school</span>:<span class=\"string\">'school'</span>,<span class=\"attr\">subject</span>:<span class=\"string\">'subject'</span>&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class=\"line\">    ...mapState([<span class=\"string\">'sum'</span>,<span class=\"string\">'school'</span>,<span class=\"string\">'subject'</span>]),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>vue 复习</p>","more":"<h5 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h5><p>VUE 参考了 mvvm 架构模型，m（模型 model）data 中的数据，v（视图 view）模版，vm（视图模型 viewmodel）vue 实例对象</p>\n<p>但是 vue 中添加了一个属性。ref<br>通过 ref 可以拿到 dom 对象，通过 ref 直接去操作视图。这一点上，违背了 mvvm</p>\n<h5 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h5><p><img src=\"imgs/Snipaste_2021-11-16_23-33-59.png\"></p>\n<p>这部分只做了数据代理，没有做数据劫持，也就是数据改变视图改变（响应式），其实_data 里面的属性 vue 有做数据劫持。</p>\n<p>Vue2.x 是使用 Object.defindProperty()，来进行对对象的监听的，但是改变数组里的某个值不会触发 set，(如果要监听的到话，需要重新编写数组的方法)， 必须遍历每个对象的每个属性，如果对象嵌套很深的话，需要使用递归调用。</p>\n<h5 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h5><p>1.prevent:阻止默认事件（常用）</p>\n<p>2.stop：阻止时间冒泡（常用）</p>\n<p>3.once：事件只触发一次（常用）</p>\n<p>4.capture:使用事件的捕获模式</p>\n<p>5.self：只有 event.target 是当前操作元素才会触发事件</p>\n<p>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕。（@scroll 滚动条事件用不到，@wheel 滚轮事件用到一般 c 端会用到）</p>\n<p>Tips：可以使用链式写法@click.prevent.stop</p>\n<h5 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h5><p>@keyup.enter=””</p>\n<p>1.vue 常用的按键别名</p>\n<p>回车 enter</p>\n<p>删除 delete （退格和删除都能触发）</p>\n<p>退出 esc</p>\n<p>空格 space</p>\n<p>2.vue 为提供的按键，可以使用案件原始的 key 值去绑定，但注意转为短横线命名。</p>\n<p>3.系统修饰键用法比较特殊 最好配合 keydown 使用</p>\n<p>4.vue.config.keyCode.自定义键名 = 键码</p>\n<p>Tips：可以使用链式写法@keyup.enter.y=””意思是 enter 和 y 都要按才能触发</p>\n<h5 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">完整写法</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tfullName:&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nameA+<span class=\"string\">'-'</span><span class=\"keyword\">this</span>.nameB</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span>(value)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> arr = value.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.nameA = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.nameB = arr[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">简写（只用到<span class=\"keyword\">get</span>，用不到<span class=\"keyword\">set</span>的时候使用）</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tfullName()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nameA+<span class=\"string\">'-'</span><span class=\"keyword\">this</span>.nameB</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"监视属性\"><a href=\"#监视属性\" class=\"headerlink\" title=\"监视属性\"></a>监视属性</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:&#123;</span><br><span class=\"line\">\tid:<span class=\"number\">2</span>,</span><br><span class=\"line\">\tnumbers:&#123;</span><br><span class=\"line\">\t\ta:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tb:<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">\tid:&#123;</span><br><span class=\"line\">\t\thandler()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a改变了'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\t<span class=\"comment\">//如果要监视多级结构中某个属性的变化可以这样写</span></span><br><span class=\"line\">\t<span class=\"string\">'numbers.a'</span>:&#123;</span><br><span class=\"line\">  \thandler(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">  \t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a改变了'</span>)</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\t<span class=\"comment\">//监视多级结构所有属性的变化</span></span><br><span class=\"line\">\tnumbers:&#123;</span><br><span class=\"line\">\t\timmediate:<span class=\"literal\">true</span>,<span class=\"comment\">//初始化时让handler执行一次</span></span><br><span class=\"line\">\t\tdeep:<span class=\"literal\">true</span>,<span class=\"comment\">//深度监视</span></span><br><span class=\"line\">\t\thandler(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'numbers改变了'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//简写（用不到deep，和immediate时使用）</span></span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">\tid(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'id改变了'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Tips：</span><br><span class=\"line\">vm.$watch(<span class=\"string\">'id'</span>,&#123;</span><br><span class=\"line\">\t\timmediate:<span class=\"literal\">true</span>,<span class=\"comment\">//初始化时让handler执行一次</span></span><br><span class=\"line\">\t\tdeep:<span class=\"literal\">true</span>,<span class=\"comment\">//深度监视</span></span><br><span class=\"line\">\t\thandler(n,o)&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.$watch(<span class=\"string\">'id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n,o</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'id改变了'</span>，n,o)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"计算属性和监听属性的区别\"><a href=\"#计算属性和监听属性的区别\" class=\"headerlink\" title=\"计算属性和监听属性的区别\"></a>计算属性和监听属性的区别</h5><p>computed 能完成的，watch 都能完成，watch 可以执行异步任务，computed 不行，computed 只有原始值发生变化，才会触发，具有缓存，watch 是数据改变就会触发。</p>\n<p>Tips：所有被 vue 管理的函数嘴还写成普通函数，所有不被 vue 管理的函数最好写成箭头函数，这样 this 才是指向 vm 或组件实例对象。</p>\n<h5 id=\"vue-set\"><a href=\"#vue-set\" class=\"headerlink\" title=\"vue.set()\"></a>vue.set()</h5><h5 id=\"数据劫持\"><a href=\"#数据劫持\" class=\"headerlink\" title=\"数据劫持\"></a>数据劫持</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正常初始化data后，模版解析渲染页面，这个时候是响应式的，但是后面又想给data对象中追加数据，这个时候vue不做响应式，就像vue的bug。</span></span><br><span class=\"line\">如果要给对象加属性，而且要响应式，要用</span><br><span class=\"line\"><span class=\"number\">1.</span>vue.set(target,propertyName/index,value)或vm.$<span class=\"keyword\">set</span>(target,propertyName/index,value)</span><br><span class=\"line\">2.但是vue.<span class=\"keyword\">set</span>和vm.$<span class=\"keyword\">set</span>不能给vm或vm根数据对象添加对象（Tips:不能给data直接添加属性 要再加一层结构）</span><br><span class=\"line\">如果要修改数组中的某个元素一定要用如下方法不然不能响应式，可以使用这些vue包裹过的API push() shift() unshift() splice() sort() reverse()或者vm.$<span class=\"keyword\">set</span>() vue.<span class=\"keyword\">set</span>()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Es6\"><a href=\"#Es6\" class=\"headerlink\" title=\"Es6\"></a>Es6</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形参默认值</span></span><br><span class=\"line\">test(a=<span class=\"string\">\"1\"</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test（）<span class=\"comment\">//1</span></span><br><span class=\"line\">test（<span class=\"number\">2</span>）<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"管道符\"><a href=\"#管道符\" class=\"headerlink\" title=\"管道符\"></a>管道符</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//和methods 同一层级的配置项</span></span><br><span class=\"line\">常用在插值表达式中&#123;&#123;a | c&#125;&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">filter:&#123;</span><br><span class=\"line\">\tc(value)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//value 会收到a</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"V-html\"><a href=\"#V-html\" class=\"headerlink\" title=\"V-html\"></a>V-html</h5><p>向指定节点渲染包换 html 结构的内容</p>\n<p>v-html 可以识别 html 结构</p>\n<p>v-html 有安全性问题 不要在用户提交的内容上使用 容易导致 xxs 攻击</p>\n<h5 id=\"v-clock\"><a href=\"#v-clock\" class=\"headerlink\" title=\"v-clock\"></a>v-clock</h5><p>直接写在标签里 <div v-clock/></p>\n<p>使用 css 属性属性选择器[v-clock]{}可以解决因为网速满页面出现情况</p>\n<p>当脚本跑起来时 vue 会删掉 v-clock 属性</p>\n<h5 id=\"V-once\"><a href=\"#V-once\" class=\"headerlink\" title=\"V-once\"></a>V-once</h5><p>只在初始化时解析一次 后面就视为静态内容 <div v-once/></p>\n<h5 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>v-自定义指令名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>写在配置项directives：&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">自定义指令名（element，binding）&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\telement.innerText = binding.value * <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果需要处理一些逻辑时自定义指令写成对象形式</span></span><br><span class=\"line\">fbind:&#123;</span><br><span class=\"line\">  <span class=\"comment\">//一上来调用，指令绑定时</span></span><br><span class=\"line\">  bind(e,b)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//指令所在的元素被插入页面时</span></span><br><span class=\"line\">  inserted(e,d)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//比如input获取焦点需要写在这里</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//指令所在的模版被重新解析时</span></span><br><span class=\"line\">   update(e,b)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>初始化时调用一次，指令所在的模版被重新解析式调用。</span><br><span class=\"line\"><span class=\"number\">4.</span>指令函数里的<span class=\"keyword\">this</span>指向<span class=\"built_in\">window</span>，而不是由vue管理的函数都指向vm，因为指令函数把元素传给你了，方便你操作dom</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforCreated 访问不到数据和方法，因为还没数据监听和数据代理</span><br><span class=\"line\">created 初始化完成，数据和方法都可以访问 但是真实dom还没有挂载，一般写初始化数据，比如通过求返回的数据渲染页面，但是访问不到htmlelement</span><br><span class=\"line\">beforMount 挂载前，页面已经出来但是还未经vue编译，此时对dom操作都没有效果，因为下一步会将之前准备好的虚拟dom转换成真实dom，而不是你改完的dom</span><br><span class=\"line\">mounted 数据，方法和dom都已经准好，一般在这里写需要等初始化页面完成后，再对html的dom节点操作的需求。如果在这里面写会更新dom需要用到的data数据时，比如根据借口返回值渲染页面，可能发生闪屏。</span><br><span class=\"line\">beforUpdate 数据已经更新，但是页面还没渲染</span><br><span class=\"line\">updated 页面渲染完成</span><br><span class=\"line\">beforDestory 实例销毁前，一般写收尾工作，比如消除定时器等。注意不要写操作数据，因为不会触发更新。</span><br><span class=\"line\">destory</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue-组件化\"><a href=\"#vue-组件化\" class=\"headerlink\" title=\"vue 组件化\"></a>vue 组件化</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有单文件组件和多文件组件,下面是单文件组件的配置写法，一般实际项目上不会用单文件组件，到vue开发工具里组件注册时的名字会变成首字母大写，如果不想用注册时的名字，可以加配置项name</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> msg = Vue.extend(&#123;</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            msg: <span class=\"string\">\"不是\"</span>,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> error1 = &#123;</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            error: <span class=\"string\">\"错误\"</span>,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;&#123;&#123;error&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> error = &#123;</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            error: <span class=\"string\">\"是\"</span>,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;p&gt;&#123;&#123;error&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;error1 /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>,</span><br><span class=\"line\">        <span class=\"comment\">//组件嵌套</span></span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">          error1,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">        components: &#123;</span><br><span class=\"line\">          error,</span><br><span class=\"line\">          msg,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;&#125;,</span><br><span class=\"line\">        created() &#123;&#125;,</span><br><span class=\"line\">        mounted() &#123;&#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>VueComponent</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//每一个组件其实就是VueComponent的实例对象，VueComponen是一个构造函数，由vue.extend生成的，也就是new出来的，每个组件里的this指VueComponent，我们写的组件，比如组件名叫school，使用时&lt;school &gt;，vue在解析的时候会帮我们创建new Vuecomponent(options)；</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内置关系\"><a href=\"#内置关系\" class=\"headerlink\" title=\"内置关系\"></a>内置关系</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VueComponent.property._proto_ === vue.property</span><br><span class=\"line\">组件实例的原型对象默认zhii x指向vue原型对象，这样方便组件访问vue的属性和方法。组件实例的原型对象默认指向object原型对象，vue改变了它的指向。</span><br><span class=\"line\"><span class=\"comment\">//Tips：所有函数实例的_proto_都指向缔造它的原型原型对象，property是显式的原型属性，_proto_是隐式的原型属性</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"为什么-main-js-里要写成-render-函数\"><a href=\"#为什么-main-js-里要写成-render-函数\" class=\"headerlink\" title=\"为什么 main.js 里要写成 render 函数\"></a>为什么 main.js 里要写成 render 函数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#39;vue&#39;实际上引入的是运行时vue，并不是完整版的vue，少了template解析器，因为webpack打包完后就不用template了,这样做节约了100多kb,最重要的打包后不需要用到template解析器代码。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">功能：让组件接受外部传的数据</span><br><span class=\"line\">传递数据</span><br><span class=\"line\">&lt;Demo name&#x3D;&quot;xxx&quot;&#x2F;&gt;</span><br><span class=\"line\">接受数据：</span><br><span class=\"line\">第一种方式（只接收）</span><br><span class=\"line\">props:[&#39;name&#39;]</span><br><span class=\"line\">第二种方式（限制类型）</span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">name:String</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">第三种方式（限制类型，限制是否必传，默认值）</span><br><span class=\"line\">props:[</span><br><span class=\"line\">&#123;name:String,required:true,default:&#39;老王&#39;&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">Tips：props是只读的，在组件内直接改prop会页面包错，需要在data中复制一份，myName:this.name</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Mixin-混入\"><a href=\"#Mixin-混入\" class=\"headerlink\" title=\"Mixin 混入\"></a>Mixin 混入</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> defule &#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//生命周期函数会都调用</span></span><br><span class=\"line\">\tmounted()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> mixins <span class=\"keyword\">from</span> <span class=\"string\">'./xxx'</span></span><br><span class=\"line\"><span class=\"comment\">//局部混入</span></span><br><span class=\"line\">mixins:[<span class=\"string\">'xxx'</span>]</span><br><span class=\"line\"><span class=\"comment\">//全局混入</span></span><br><span class=\"line\">Vue.mixin(xxx)</span><br><span class=\"line\">文件里有的，混入文件里也有，优先用文件里有的。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ES6-Module-及-CommonJS-的配对使用\"><a href=\"#ES6-Module-及-CommonJS-的配对使用\" class=\"headerlink\" title=\"ES6 Module 及 CommonJS 的配对使用\"></a>ES6 Module 及 CommonJS 的配对使用</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">common</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> commcls=<span class=\"keyword\">new</span> <span class=\"class\"><span class=\"keyword\">class</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name,sex,age=27)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sex=sex;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  GetName()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"我的名字是\"</span>+ <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> Money()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"我是属性钱，大家都爱我\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"keyword\">const</span> pi=<span class=\"number\">3.1415926</span>;</span><br><span class=\"line\"><span class=\"comment\">//这种写法是分别导出</span></span><br><span class=\"line\"><span class=\"comment\">//按需导出的写法是去掉export，在最下面写上export &#123;common,commcls,const&#125;</span></span><br><span class=\"line\"><span class=\"comment\">/**最常用的全部导出写法 export default&#123;common:function common(params) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  console.log(params)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;&#125;写成键值对**/</span></span><br><span class=\"line\"><span class=\"comment\">//以上有函数，js类，常量的导出</span></span><br><span class=\"line\"></span><br><span class=\"line\">导入</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;common,commcls&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./xxx'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> api <span class=\"keyword\">from</span> <span class=\"string\">'./xxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\">导出</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'commonJS_exports.js'</span>,</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">导入</span><br><span class=\"line\"><span class=\"keyword\">let</span> comObj = <span class=\"built_in\">require</span>(<span class=\"string\">'../api/module/commonJS_exports'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'../api/module/commonJS_exports'</span>);</span><br><span class=\"line\"><span class=\"comment\">//在module对象中有一个属性loaded用于记录该模块是否被加载过，它的默认值为false，当模块第一次被加载和执行过后会设置为true，后面再次加载时检查到module.loaded为true, 则不会再次执行模块代码。require函数可以接收表达式，借助这个特性我们可以动态地指定模块加载路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleNames = [<span class=\"string\">'foo.js'</span>, <span class=\"string\">'bar.js'</span>];</span><br><span class=\"line\">moduleNames.forEach(<span class=\"function\"><span class=\"params\">name</span>=&gt;</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">require</span>(<span class=\"string\">'./'</span> + name);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">CommonJS和ES6 Module的区别</span><br><span class=\"line\"><span class=\"comment\">//CommonJS模块依赖关系的建立发生在代码运行阶段,ES6 Module模块依赖关系的建立发生在代码编译阶段。前者可以动态指定require的模块路径，后者不行，但是可以冗余代码检测和排除，我们可以用静态分析工具分析工具检测出哪些模块没有被调用过，然后去掉这些模块，后者编译器程序效率更高。</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"插件的使用\"><a href=\"#插件的使用\" class=\"headerlink\" title=\"插件的使用\"></a>插件的使用</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个plugins.js</span><br><span class=\"line\"><span class=\"keyword\">export</span> defulue&#123;</span><br><span class=\"line\">\tinstall(vue,x)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//比如全局过滤器</span></span><br><span class=\"line\">\t\tVue.filter(...)</span><br><span class=\"line\">\t\t<span class=\"comment\">//全局混入</span></span><br><span class=\"line\">\t\tVue.mixin(...)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">在main.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> plugins <span class=\"keyword\">from</span> <span class=\"string\">'./plugins'</span></span><br><span class=\"line\">Vue.use(plugins,<span class=\"number\">1</span>)<span class=\"comment\">//可以传参</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"组件传值\"><a href=\"#组件传值\" class=\"headerlink\" title=\"组件传值\"></a>组件传值</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>父向子传值</span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;Student :name=<span class=\"string\">\"小明\"</span>/&gt;</span><br><span class=\"line\"><span class=\"comment\">//自组件</span></span><br><span class=\"line\">props：[name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>子向父传值</span><br><span class=\"line\">(<span class=\"number\">1</span>)第一种</span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">\t&lt;Student @getName=<span class=\"string\">\"demo\"</span>/&gt;</span><br><span class=\"line\">  <span class=\"comment\">//getName是自定义事件名称</span></span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    getName(name)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">      <span class=\"comment\">//小明</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;button @clicl=<span class=\"string\">\"sendName\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>/&gt;</span></span></span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"小明\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">    sendName()&#123;</span><br><span class=\"line\">      <span class=\"comment\">//getName这里必须写的和在父组件里子组件标签上自定义事件名字一样</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'getName'</span>,<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">      <span class=\"comment\">//解除绑定自定义事件</span></span><br><span class=\"line\">      <span class=\"comment\">//this.$off('getName')</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">(<span class=\"number\">2</span>)第二种</span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;Student :getName=<span class=\"string\">\"getName\"</span>/&gt;</span><br><span class=\"line\">  <span class=\"comment\">//传一个函数给子组件</span></span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    getName(name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;button @clicl=<span class=\"string\">\"sendName\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>/&gt;</span></span></span><br><span class=\"line\">data()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"小明\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">props：[getName]，</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  sendName()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"number\">3</span>)第三种</span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;Student ref=<span class=\"string\">\"Student\"</span>/&gt;</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    getName(name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  mounted()&#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.$refs.Student.$on(<span class=\"string\">'getName'</span>,<span class=\"keyword\">this</span>.getName)</span><br><span class=\"line\">    <span class=\"comment\">//这种写法可以延迟绑定自定义事件</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;button @clicl=<span class=\"string\">\"sendName\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>/&gt;</span></span></span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"小明\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">    sendName()&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'getName'</span>,<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"bus\"><a href=\"#bus\" class=\"headerlink\" title=\"$bus\"></a>$bus</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局事件总线</span><br><span class=\"line\">在main.js 里<span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">beforCreated()&#123;</span><br><span class=\"line\">\tVue.prototype.$bus = <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">A组件接收数据</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">\tdemo(data)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$bus.$on(<span class=\"string\">'xxx'</span>,<span class=\"keyword\">this</span>.demo)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B组件提供数据</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$bus.$emit(<span class=\"string\">'xxx'</span>,<span class=\"keyword\">this</span>.data)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"$nextTick\"></a>$nextTick</h5><ul>\n<li>作用：在下一次 dom 更新后调用</li>\n<li>什么时候用：当数据改变，要基于更新后的新 dom 进行操作时，要在 nextTick 的回调函数里执行。</li>\n</ul>\n<h5 id=\"Vue-封装的过渡与动画\"><a href=\"#Vue-封装的过渡与动画\" class=\"headerlink\" title=\"Vue 封装的过渡与动画\"></a>Vue 封装的过渡与动画</h5><p>元素进入的样式</p>\n<ul>\n<li>v-enter 进入的起点</li>\n<li>v-enter-active 进入过程中</li>\n<li>v-enter-to 进入的终点</li>\n</ul>\n<p>元素离开的样式</p>\n<ul>\n<li>v-leave 离开的起点</li>\n<li>v-leave-active 离开的过程中</li>\n<li>V-leave-to 离开终点</li>\n</ul>\n<p><transition name=\"xxx\"></transition></p>\n<ul>\n<li>xxx 对应 v-leave 的 v</li>\n<li>appear 一开始进入时就有动画</li>\n</ul>\n<p>若有多个元素需要过渡，transition-group 每个元素加 key 值</p>\n<h5 id=\"proxy-代理\"><a href=\"#proxy-代理\" class=\"headerlink\" title=\"proxy 代理\"></a>proxy 代理</h5><p>写在 vue.config.js</p>\n<p>第一种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">\tproxy:&#39;http:&#x2F;&#x2F;localhost:5000&#39;&#x2F;&#x2F;目标服务器</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>缺点：这样写请求全部走了代理，不能控制哪些请求走代理。</p>\n<p>第二种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">\tproxy:&#123;</span><br><span class=\"line\">\t\t&#39;&#x2F;api&#39;:&#123;</span><br><span class=\"line\">\t\t\ttarget:http:&#x2F;&#x2F;localhost:5000&#39;,</span><br><span class=\"line\">\t\t\tpathRewrite:&#123;&#39;^&#x2F;api&#39;:&#39;&#39;&#125;&#x2F;&#x2F;去掉url的api</span><br><span class=\"line\">\t\t\tws:true,&#x2F;&#x2F;开启webSockst</span><br><span class=\"line\">\t\t\tchangeOrigin:true,&#x2F;&#x2F;你多大鞋我就多大的脚</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"es6…扩展操作符\"><a href=\"#es6…扩展操作符\" class=\"headerlink\" title=\"es6…扩展操作符\"></a>es6…扩展操作符</h5><p>数组合并</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> book1 = [<span class=\"string\">\"平凡的世界第一部\"</span>, <span class=\"string\">\"平凡的世界第二部\"</span>, <span class=\"string\">\"平凡的世界第三部\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> book2 = [<span class=\"string\">\"人生\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> book3 = book1.concat(book2);</span><br><span class=\"line\"><span class=\"comment\">//console.log(book3) // (4) [\"平凡的世界第一部\", \"平凡的世界第二部\", \"平凡的世界第三部\", \"人生\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> book4 = [...book1, ...book2];</span><br><span class=\"line\">book4[<span class=\"number\">3</span>] = <span class=\"string\">\"月夜静悄悄\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(book4); <span class=\"comment\">//(4) [\"平凡的世界第一部\", \"平凡的世界第二部\", \"平凡的世界第三部\", \"月夜静悄悄\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>对象合并</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  book1: <span class=\"string\">\"平凡的世界第一部\"</span>,</span><br><span class=\"line\">  book2: <span class=\"string\">\"平凡的世界第二部\"</span>,</span><br><span class=\"line\">  book3: <span class=\"string\">\"平凡的世界第三部\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  ...obj1,</span><br><span class=\"line\">  book4: <span class=\"string\">\"人生\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//&#123;book1: \"平凡的世界第一部\", book2: \"平凡的世界第二部\", book3: \"平凡的世界第三部\", book4: \"人生\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如后者与前者相同，后者覆盖前者</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  book1: <span class=\"string\">\"平凡的世界第一部\"</span>,</span><br><span class=\"line\">  book2: <span class=\"string\">\"平凡的世界第二部\"</span>,</span><br><span class=\"line\">  book3: <span class=\"string\">\"平凡的世界第三部\"</span>,</span><br><span class=\"line\">  book4: <span class=\"string\">\"月夜静悄悄\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  ...obj1,</span><br><span class=\"line\">  book4: <span class=\"string\">\"月夜静悄悄11111\"</span>,</span><br><span class=\"line\">  book5: <span class=\"string\">\"人生\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//&#123;book1: \"平凡的世界第一部\", book2: \"平凡的世界第二部\", book3: \"平凡的世界第三部\", book4: \"月夜静悄悄11111\", book5: \"人生\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"daisy\"</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">job</span>: <span class=\"string\">\"web\"</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123; <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj5 = &#123; ...obj, ...obj1, ...obj2 &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj5); <span class=\"comment\">//&#123;name: \"daisy\", job: \"web\", sex: 1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//与Object.assign用法相同 Object.assign(target, ...sources)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj4 = <span class=\"built_in\">Object</span>.assign(obj, obj1, obj2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj4); <span class=\"comment\">//&#123;name: \"daisy\", job: \"web\", sex: 1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">//&#123;name: \"daisy\", job: \"web\", sex: 1&#125;  /**注意目标对象也会随之改变 */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h5><ol>\n<li><p>作用：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 <strong style=\"color:red\">父组件 ===&gt; 子组件</strong> 。</p>\n</li>\n<li><p>分类：默认插槽、具名插槽、作用域插槽</p>\n</li>\n<li><p>使用方式：</p>\n<p>默认插槽：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">&lt;Category&gt;</span><br><span class=\"line\">           &lt;div&gt;html结构1&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;&#x2F;Category&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;!-- 定义插槽 --&gt;</span><br><span class=\"line\">    &lt;slot&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​ 具名插槽</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">&lt;Category&gt;</span><br><span class=\"line\">            &lt;template slot&#x3D;&quot;center&quot;&gt;</span><br><span class=\"line\">              &lt;div&gt;html结构1&lt;&#x2F;div&gt;</span><br><span class=\"line\">            &lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;template v-slot:footer&gt;</span><br><span class=\"line\">               &lt;div&gt;html结构2&lt;&#x2F;div&gt;</span><br><span class=\"line\">            &lt;&#x2F;template&gt;</span><br><span class=\"line\">        &lt;&#x2F;Category&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;!-- 定义插槽 --&gt;</span><br><span class=\"line\">    &lt;slot name&#x3D;&quot;center&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class=\"line\">    &lt;slot name&#x3D;&quot;footer&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​ 作用域插槽</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">理解：</span><br><span class=\"line\">&lt;span</span><br><span class=\"line\">  style&#x3D;&quot;color:red&quot;</span><br><span class=\"line\">&gt;数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。&lt;&#x2F;span&gt;</span><br><span class=\"line\">（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</span><br><span class=\"line\">父组件中：</span><br><span class=\"line\">&lt;Category&gt;</span><br><span class=\"line\">\t\t\t&lt;template scope&#x3D;&quot;scopeData&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;!-- 生成的是ul列表 --&gt;</span><br><span class=\"line\">\t\t\t\t&lt;ul&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;li v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;ul&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;template&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;Category&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Category&gt;</span><br><span class=\"line\">\t\t\t&lt;template slot-scope&#x3D;&quot;scopeData&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;!-- 生成的是h4标题 --&gt;</span><br><span class=\"line\">\t\t\t\t&lt;h4 v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;template&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;Category&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;slot :games&#x3D;&quot;games&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;Category&quot;,</span><br><span class=\"line\">  props: [&quot;title&quot;],</span><br><span class=\"line\">  &#x2F;&#x2F;数据在子组件自身</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      games: [&quot;红色警戒&quot;, &quot;穿越火线&quot;, &quot;劲舞团&quot;, &quot;超级玛丽&quot;],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h2><h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><p>​ 在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>\n<h3 id=\"2-何时使用？\"><a href=\"#2-何时使用？\" class=\"headerlink\" title=\"2.何时使用？\"></a>2.何时使用？</h3><p>​ 多个组件需要共享数据时</p>\n<h3 id=\"3-搭建-vuex-环境\"><a href=\"#3-搭建-vuex-环境\" class=\"headerlink\" title=\"3.搭建 vuex 环境\"></a>3.搭建 vuex 环境</h3><ol>\n<li>创建文件：<code>src/store/index.js</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入Vue核心库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//引入Vuex</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">\"vuex\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//应用Vuex插件</span></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//准备actions对象——响应组件中用户的动作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//准备mutations对象——修改state中的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//准备state对象——保存具体的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在<code>main.js</code>中创建 vm 时传入<code>store</code>配置项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">//引入store</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建vm</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">\trender: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">\tstore</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-基本使用\"><a href=\"#4-基本使用\" class=\"headerlink\" title=\"4.基本使用\"></a>4.基本使用</h3><ol>\n<li>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入Vue核心库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//引入Vuex</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">\"vuex\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//引用Vuex</span></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//响应组件中加的动作</span></span><br><span class=\"line\">  jia(context, value) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log('actions中的jia被调用了',miniStore,value)</span></span><br><span class=\"line\">    context.commit(<span class=\"string\">\"JIA\"</span>, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//执行加</span></span><br><span class=\"line\">  JIA(state, value) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log('mutations中的JIA被调用了',state,value)</span></span><br><span class=\"line\">    state.sum += value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  sum: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>组件中读取 vuex 中的数据：<code>$store.state.sum</code></p>\n</li>\n<li><p>组件中修改 vuex 中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p>\n<blockquote>\n<p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"5-getters-的使用\"><a href=\"#5-getters-的使用\" class=\"headerlink\" title=\"5.getters 的使用\"></a>5.getters 的使用</h3><ol>\n<li><p>概念：当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。</p>\n</li>\n<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">\tbigSum(state)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.sum * <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\tgetters</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>组件中读取数据：<code>$store.getters.bigSum</code></li>\n</ol>\n<h3 id=\"6-四个-map-方法的使用\"><a href=\"#6-四个-map-方法的使用\" class=\"headerlink\" title=\"6.四个 map 方法的使用\"></a>6.四个 map 方法的使用</h3><ol>\n<li><strong>mapState 方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class=\"line\">     ...mapState(&#123;<span class=\"attr\">sum</span>:<span class=\"string\">'sum'</span>,<span class=\"attr\">school</span>:<span class=\"string\">'school'</span>,<span class=\"attr\">subject</span>:<span class=\"string\">'subject'</span>&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class=\"line\">    ...mapState([<span class=\"string\">'sum'</span>,<span class=\"string\">'school'</span>,<span class=\"string\">'subject'</span>]),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm9tan15g0000rxrc7nmw80bm","tag_id":"cm9tan15j0002rxrc5tzs6tpv","_id":"cm9tan15l0005rxrcg0sffwmr"},{"post_id":"cm9tan15j0001rxrcb8jhfi4h","tag_id":"cm9tan15j0002rxrc5tzs6tpv","_id":"cm9tan15l0007rxrc0nlp4h7w"},{"post_id":"cm9tan15k0003rxrcgy5c2bpw","tag_id":"cm9tan15j0002rxrc5tzs6tpv","_id":"cm9tan15l0008rxrc059c0par"}],"Tag":[{"name":"javascript","_id":"cm9tan15j0002rxrc5tzs6tpv"}]}}