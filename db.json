{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/next/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/arrow-left.svg","path":"images/arrow-left.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/github.svg","path":"images/github.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/arrow-right.svg","path":"images/arrow-right.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/mail.svg","path":"images/mail.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/menu.svg","path":"images/menu.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/twitter.svg","path":"images/twitter.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/weibo.svg","path":"images/weibo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/Snipaste_2021-11-16_23-33-59.png","path":"images/Snipaste_2021-11-16_23-33-59.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/README.md","hash":"edbf30913dc9cc8dc34b18ed4baa9a10fccc1a83","modified":1638343161628},{"_id":"themes/next/_config.yml","hash":"d72f60b615db820740d1c43124d6f213c09c6783","modified":1638344016908},{"_id":"themes/next/LICENSE","hash":"9cc3d3b0d43454286f367d5c278a8176555f4b8d","modified":1636512977716},{"_id":"themes/next/.DS_Store","hash":"7e641536d0ccc028b051432ecd3cc97effa96769","modified":1637920458106},{"_id":"source/.DS_Store","hash":"907ec11c83d87bcbee49d883f766a9cd8b817324","modified":1637918973751},{"_id":"source/_posts/js方法等.md","hash":"51697dfe57b97a2b18516319e4c25dc8bff17bd3","modified":1637918973751},{"_id":"source/_posts/vue2&3.md","hash":"7565e7dff554b13e63f970edb98162bdc05037a2","modified":1637920624859},{"_id":"source/_posts/.DS_Store","hash":"a864d547d19a2bbce7e32b7729f6994515a4b2a2","modified":1637918973751},{"_id":"themes/next/docs/Hexo-Post-template.md","hash":"2daa1d28ba3cb132728fc27b170d8db897c55f16","modified":1636512977717},{"_id":"themes/next/docs/Home.md","hash":"74ef61a6c066e37ff5945a981ccabc958ac418fb","modified":1638343142321},{"_id":"themes/next/docs/PreviewPhoto_首页预览图.md","hash":"5227892f22080c50c1561a2bc07b246f27825761","modified":1636512977717},{"_id":"themes/next/docs/Todo.md","hash":"5519f0fb63fd41b1672733e6087faa70604a99b8","modified":1636512977717},{"_id":"themes/next/docs/analytics_访问统计.md","hash":"518cd46e65172cacdaec5bbfe248de99aa15a4a8","modified":1636512977717},{"_id":"themes/next/docs/Changelog.md","hash":"fd495d6fea47ad3e6058c8f4369334ed31b54928","modified":1636512977716},{"_id":"themes/next/docs/pagefooter_页脚.md","hash":"f8981b6bb4a7e7b630027f0c8e28ef95bd43d1c4","modified":1636512977718},{"_id":"themes/next/docs/navigation_导航栏.md","hash":"97fd3482decff0941d5489ba344bbc610d485808","modified":1636512977717},{"_id":"themes/next/docs/comment_评论.md","hash":"513841d3e9ba56b560444f2e87cd4fdfe765f4bd","modified":1636512977717},{"_id":"themes/next/docs/widget_部件.md","hash":"b8161c29699701040d389be394c2a88dac714ea8","modified":1636512977718},{"_id":"themes/next/docs/socail_社交.md","hash":"bc383ef54fffb302aa9a7aee8f2351f7c3823eb5","modified":1636512977718},{"_id":"themes/next/layout/archive.ejs","hash":"5afa6387ae87e15a4562822850806c51f471cbe8","modified":1636512977720},{"_id":"themes/next/layout/layout.ejs","hash":"cbdce5eecad781dd0cb8e0c6788a9bf5e9359800","modified":1636512977720},{"_id":"themes/next/layout/index.ejs","hash":"3317310e01719dd58878fb4b7bd1b41d495800af","modified":1636512977720},{"_id":"themes/next/layout/post.ejs","hash":"be2fe9171f1c8f15447b8fe6e69a82cd40a4dead","modified":1636512977720},{"_id":"themes/next/layout/tag.ejs","hash":"f13f991cdd2d462cfaff2ead0a110504e10d1d2f","modified":1636512977721},{"_id":"themes/next/languages/default.yml","hash":"2df42359e6646c0c2903ada8411100a8f1d15134","modified":1636512977718},{"_id":"themes/next/languages/en.yml","hash":"2df42359e6646c0c2903ada8411100a8f1d15134","modified":1636512977718},{"_id":"themes/next/languages/zh-CN.yml","hash":"3e28e97eaf0e172ddee96b2d6f8ba604d90ff24d","modified":1636512977718},{"_id":"themes/next/languages/zh-TW.yml","hash":"c727b3550a12ad6f99b13e1b320466f8238f4b54","modified":1636512977718},{"_id":"themes/next/source/.DS_Store","hash":"0b61be484e3598b3462cbb76fd5449849cd52b4b","modified":1637920458104},{"_id":"themes/next/screenshots/daily.jpg","hash":"5ab1de0c8c1b749c09c96b774b5f36e597167546","modified":1636512977721},{"_id":"themes/next/layout/_partial/article-index.ejs","hash":"712c3930f7c5ebb433afedfcd6098d67e28da380","modified":1636512977719},{"_id":"themes/next/layout/_partial/article-archive.ejs","hash":"32e6d38ac9074922f958126da4eb5cde0ae98da4","modified":1636512977719},{"_id":"themes/next/layout/_partial/comment.ejs","hash":"9c8975d87fe1a1aad63cd74affa68f42ec3334e1","modified":1636512977719},{"_id":"themes/next/layout/_partial/nav.ejs","hash":"cb5cb6371ad98a3fafb9d138a4f05b0b13a83edc","modified":1636512977720},{"_id":"themes/next/layout/_partial/after-footer.ejs","hash":"00588b4db6aeec2d1f7951ee96980764a15e7f4f","modified":1636512977719},{"_id":"themes/next/layout/_partial/head.ejs","hash":"9338cdc926aae79a50733e014e82471202b8fa07","modified":1636512977720},{"_id":"themes/next/layout/_partial/pagination.ejs","hash":"98af75b95859dc6aae946497f27d7e51f753e5f6","modified":1636512977720},{"_id":"themes/next/layout/_partial/footer.ejs","hash":"5f190a7233be1322e744fecd2759b8e8f7042be5","modified":1636512977719},{"_id":"themes/next/source/css/_archive.scss","hash":"698f914f037079d1a25b9d86923eac4775b2ec7a","modified":1636512977721},{"_id":"themes/next/source/css/_comment.scss","hash":"8f92712c08489332c824d13e9e3d11bd2a0f1fd0","modified":1636512977721},{"_id":"themes/next/source/css/_highlight.scss","hash":"7d0bb75b74bea68dc04fa0346949d8f17fd28a0b","modified":1636512977722},{"_id":"themes/next/source/css/_mobile.scss","hash":"2b7297a4539e6ae803fe459ef411aa4149b24fcf","modified":1636512977722},{"_id":"themes/next/source/css/_daily.scss","hash":"e4261421d6c6af5b20c8e2b36353ea95cadb4eef","modified":1636512977722},{"_id":"themes/next/source/css/_nav.scss","hash":"eebe106b0360ea5d6735c59b524338faf0937d45","modified":1636512977722},{"_id":"themes/next/source/css/_post.scss","hash":"d674fd9312c33f98177ba8f7e144b2a663c60fd9","modified":1636512977722},{"_id":"themes/next/source/css/_normalize.scss","hash":"59fff706bed3120e3d9d6d0092a0372c172ee537","modified":1636512977722},{"_id":"themes/next/source/css/_variables.scss","hash":"508a896974912ccfdc4b14397df9fa4924d31dbf","modified":1636512977723},{"_id":"themes/next/source/css/style.scss","hash":"163cde007c7fb3debf9f53594c72d6536242f688","modified":1636512977723},{"_id":"themes/next/source/js/app.js","hash":"b74710d1dd7b7d1407b4fcfc9499bc37de69b21e","modified":1636512977724},{"_id":"themes/next/source/images/arrow-left.svg","hash":"4230dcb796a40d7a0f54c68e1ffb1f325ad962a5","modified":1636512977723},{"_id":"themes/next/source/images/github.svg","hash":"bc2e3f2e54c354acfe64899482f6379d25f04792","modified":1636512977723},{"_id":"themes/next/source/images/arrow-right.svg","hash":"98c04bf1be3ca657f1e9697dc63219ade0a5616c","modified":1636512977723},{"_id":"themes/next/source/images/mail.svg","hash":"18b3549b0447d605ca252fefcaa4d8e11179ce21","modified":1636512977723},{"_id":"themes/next/source/images/menu.svg","hash":"a1837ac76bc3e2aaf30450941bfefcb29ba16411","modified":1636512977723},{"_id":"themes/next/source/images/twitter.svg","hash":"2bef6c843de0113721c6c5d1676385897a22a446","modified":1636512977724},{"_id":"themes/next/source/images/weibo.svg","hash":"ffd43d8ae9f9ec4f5ae8b97cafa9023ac2a4e59b","modified":1636512977724},{"_id":"themes/next/source/images/Snipaste_2021-11-16_23-33-59.png","hash":"6116a6b746107a0d96543fb05b22b657b4ec44b7","modified":1637076842786},{"_id":"public/2021/11/vue2&3/index.html","hash":"e9efaa9b3fd0b8b92261598c4dca68b35f47f0f0","modified":1638344276627},{"_id":"public/2021/11/js方法等/index.html","hash":"d4643d5e180fe2f78001390f1310f76a4949b0c7","modified":1638344276627},{"_id":"public/archives/2021/index.html","hash":"997cdb904cd22925747b5691c4db5d0cfa2c84d5","modified":1638344276627},{"_id":"public/archives/2021/11/index.html","hash":"e952244cd07e5f8c608cef5ac8d7bfec92fbac08","modified":1638344276627},{"_id":"public/index.html","hash":"befbd645fd1165e732aef3d9b95dd7b6674d8ad7","modified":1638344276627},{"_id":"public/tags/javascript/index.html","hash":"e86744538e0048514e19da7de2ac299ca296d079","modified":1638344276627},{"_id":"public/archives/index.html","hash":"300695c7dd9ee803fad8e55fdd461d41a39a4c7a","modified":1638344276627},{"_id":"public/images/arrow-left.svg","hash":"4230dcb796a40d7a0f54c68e1ffb1f325ad962a5","modified":1638344276627},{"_id":"public/images/github.svg","hash":"bc2e3f2e54c354acfe64899482f6379d25f04792","modified":1638344276627},{"_id":"public/images/arrow-right.svg","hash":"98c04bf1be3ca657f1e9697dc63219ade0a5616c","modified":1638344276627},{"_id":"public/images/weibo.svg","hash":"ffd43d8ae9f9ec4f5ae8b97cafa9023ac2a4e59b","modified":1638344276627},{"_id":"public/images/menu.svg","hash":"a1837ac76bc3e2aaf30450941bfefcb29ba16411","modified":1638344276627},{"_id":"public/images/twitter.svg","hash":"2bef6c843de0113721c6c5d1676385897a22a446","modified":1638344276627},{"_id":"public/images/mail.svg","hash":"18b3549b0447d605ca252fefcaa4d8e11179ce21","modified":1638344276627},{"_id":"public/js/app.js","hash":"b74710d1dd7b7d1407b4fcfc9499bc37de69b21e","modified":1638344276627},{"_id":"public/css/style.css","hash":"bb37bcc2bfac13f2ae42014bd5cc7dd4681b91b9","modified":1638344276627},{"_id":"public/images/Snipaste_2021-11-16_23-33-59.png","hash":"6116a6b746107a0d96543fb05b22b657b4ec44b7","modified":1638344276627}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"JavaScript 中常用的方法等","date":"2021-11-26T09:29:33.751Z","modified":"2021-4-20 14.37","photos":["https://images.unsplash.com/photo-1543169564-be8896b30cdb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80"],"_content":"\nJavaScript 中常用的方法汇总\n\n<!--more-->\n\n##### object.keys\n\n遍历对象的属性名返回一个新数组\n\n##### object.difineProperty\n\n第一个参数对象 ：目标（给哪个对象添加属性）\n\n第二个参数字符串 ：名字（属性名叫什么）\n\n第三个参数类型是对象：配置项 {enumerable:true；控制属性是否可枚举，默认值 false。writable:true;控制属性是否可修改，默认 false。configurable:true;控制属性可删除，默认 false。}\n\n数据代理案例\n\n```js\nlet a = {\n  b:\"1\"\n}\nlet c = \"2\"\nObject.defineProprrty(a,\"c\",{\n  get(){\n    return c\n  }\n  set(value){\n  return c = value\n}\n})\n```\n\n##### ?.和??运算符\n\n??和||类似但是不同的是逻辑或会在左侧为假值时返回右侧的操作符而？？只会在左侧为 null 和 undefined 时返回右侧\n\n`?.`主要用于在多层的 object/array 进行取值和函数调用，一般如果左边的值为 undefined 和 null 时会报错，但是加上?.就不会报错了\n\n```js\nlet b;\nb?.map((i) => {\n  console.log(i);\n});\n```\n\n##### for in 和 for of\n\nfor in\n\n1.for in 更适合遍历对象，因为 for in 利用索引遍历，不能进行几何运算\n\n2.会遍历数组的所有可枚举值，包括原型\n\nfor of\n\n1.for of 遍历的是数组元素值，而且只是数组内的元素，不包括原型\n\n2.for of 不能遍历对象，只能遍历有迭代器对象（iterator）的集合，如数组，字符串,map,set 等\n\n```js\n// for in\nvar obj = { a: 1, b: 2, c: 3 };\n\nfor (let key in obj) {\n  console.log(key);\n}\n// a b c\n\n//for of\nconst array1 = [\"a\", \"b\", \"c\"];\n\nfor (const val of array1) {\n  console.log(val);\n}\n// a b c\n```\n\nhasOwnProperty()\n\n可以判断某属性是不是该对象的实例属性\n\n```js\nvar arr = [1, 2, 3];\nArray.prototype.a = 123;\nfor (let index in arr) {\n  if (arr.hasOwnProperty(index)) {\n    let res = arr[index];\n    console.log(res);\n  }\n}\n// 1 2 3\n```\n\n##### Symbol\n\n这个函数会动态的生成一个匿名、全局唯一的值。\n\nsymbol 的基本用处\n\n1.避免对象的键被覆盖\n\n2.避免魔术字符串\n\n##### 模糊搜索\n\n```\n//vue计算属性写法\ncomputed:{\n\treturn this.list.filter(i=>{\n\t\treturn i.name.indexof(this.inputValue) !== -1\n\t})\n}\n//计算属性初始化就会执行一次，indexof（）这时候还没输入，所以indexof（''）返回全部\n```\n\n##### indexof()\n\n```\n//indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。\nstringObject.indexOf(searchvalue,fromindex)\nfromindex 非必填 规定在字符串中开始检索的位置\n```\n\n##### filter()\n\n```\nArray.filter() 三个参数 item index arr\n1.创建一个新的数组\n2.必须有返回值 return\n3.和map不同的是符合条件返回true 否则false\n\n方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。\n```\n\n##### sort()\n\nArray.sort() 两个参数 a b\n\n1.改变原数据\n\n2.a-b 升序 b-a 降序\n\n3.写回调函数时要有返回值\n\n##### Push()\n\n往数组末尾加一个或多个元素 返回改变后数组的长度\n\n##### unshift()\n\n方法可向数组的开头添加一个或更多元素，并返回新的长度 返回改变后数组的长度\n\n##### splice()\n\n方法向/从数组添加/删除项目，并返回删除的项目。\n\n三个参数\n\n第一个从什么地方添加或删除写 index，如果写负数就是从后面开始\n\n第二个 删除多少个 写 0 就是不删 或者不写也是不删\n\n第三个 需要添加到数组的新项目\n\n##### Shift()\n\n删除数组中的第一个元素 改变原数组\n\n##### reverse()\n\n方法用于颠倒数组中元素的顺序。\n","source":"_posts/js方法等.md","raw":"title: JavaScript 中常用的方法等\ndate: 2021-4-20 14.37  \nmodified: 2021-4-20 14.37\ntag:\n\n- javascript\n\nphotos:\n\n- https://images.unsplash.com/photo-1543169564-be8896b30cdb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80\n\n---\n\nJavaScript 中常用的方法汇总\n\n<!--more-->\n\n##### object.keys\n\n遍历对象的属性名返回一个新数组\n\n##### object.difineProperty\n\n第一个参数对象 ：目标（给哪个对象添加属性）\n\n第二个参数字符串 ：名字（属性名叫什么）\n\n第三个参数类型是对象：配置项 {enumerable:true；控制属性是否可枚举，默认值 false。writable:true;控制属性是否可修改，默认 false。configurable:true;控制属性可删除，默认 false。}\n\n数据代理案例\n\n```js\nlet a = {\n  b:\"1\"\n}\nlet c = \"2\"\nObject.defineProprrty(a,\"c\",{\n  get(){\n    return c\n  }\n  set(value){\n  return c = value\n}\n})\n```\n\n##### ?.和??运算符\n\n??和||类似但是不同的是逻辑或会在左侧为假值时返回右侧的操作符而？？只会在左侧为 null 和 undefined 时返回右侧\n\n`?.`主要用于在多层的 object/array 进行取值和函数调用，一般如果左边的值为 undefined 和 null 时会报错，但是加上?.就不会报错了\n\n```js\nlet b;\nb?.map((i) => {\n  console.log(i);\n});\n```\n\n##### for in 和 for of\n\nfor in\n\n1.for in 更适合遍历对象，因为 for in 利用索引遍历，不能进行几何运算\n\n2.会遍历数组的所有可枚举值，包括原型\n\nfor of\n\n1.for of 遍历的是数组元素值，而且只是数组内的元素，不包括原型\n\n2.for of 不能遍历对象，只能遍历有迭代器对象（iterator）的集合，如数组，字符串,map,set 等\n\n```js\n// for in\nvar obj = { a: 1, b: 2, c: 3 };\n\nfor (let key in obj) {\n  console.log(key);\n}\n// a b c\n\n//for of\nconst array1 = [\"a\", \"b\", \"c\"];\n\nfor (const val of array1) {\n  console.log(val);\n}\n// a b c\n```\n\nhasOwnProperty()\n\n可以判断某属性是不是该对象的实例属性\n\n```js\nvar arr = [1, 2, 3];\nArray.prototype.a = 123;\nfor (let index in arr) {\n  if (arr.hasOwnProperty(index)) {\n    let res = arr[index];\n    console.log(res);\n  }\n}\n// 1 2 3\n```\n\n##### Symbol\n\n这个函数会动态的生成一个匿名、全局唯一的值。\n\nsymbol 的基本用处\n\n1.避免对象的键被覆盖\n\n2.避免魔术字符串\n\n##### 模糊搜索\n\n```\n//vue计算属性写法\ncomputed:{\n\treturn this.list.filter(i=>{\n\t\treturn i.name.indexof(this.inputValue) !== -1\n\t})\n}\n//计算属性初始化就会执行一次，indexof（）这时候还没输入，所以indexof（''）返回全部\n```\n\n##### indexof()\n\n```\n//indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。\nstringObject.indexOf(searchvalue,fromindex)\nfromindex 非必填 规定在字符串中开始检索的位置\n```\n\n##### filter()\n\n```\nArray.filter() 三个参数 item index arr\n1.创建一个新的数组\n2.必须有返回值 return\n3.和map不同的是符合条件返回true 否则false\n\n方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。\n```\n\n##### sort()\n\nArray.sort() 两个参数 a b\n\n1.改变原数据\n\n2.a-b 升序 b-a 降序\n\n3.写回调函数时要有返回值\n\n##### Push()\n\n往数组末尾加一个或多个元素 返回改变后数组的长度\n\n##### unshift()\n\n方法可向数组的开头添加一个或更多元素，并返回新的长度 返回改变后数组的长度\n\n##### splice()\n\n方法向/从数组添加/删除项目，并返回删除的项目。\n\n三个参数\n\n第一个从什么地方添加或删除写 index，如果写负数就是从后面开始\n\n第二个 删除多少个 写 0 就是不删 或者不写也是不删\n\n第三个 需要添加到数组的新项目\n\n##### Shift()\n\n删除数组中的第一个元素 改变原数组\n\n##### reverse()\n\n方法用于颠倒数组中元素的顺序。\n","slug":"js方法等","published":1,"updated":"2021-11-26T09:29:33.751Z","comments":1,"layout":"post","link":"","_id":"ckwn7vggq0000j3rc0dkx7b3i","content":"<p>JavaScript 中常用的方法汇总</p>\n<a id=\"more\"></a>\n\n<h5 id=\"object-keys\"><a href=\"#object-keys\" class=\"headerlink\" title=\"object.keys\"></a>object.keys</h5><p>遍历对象的属性名返回一个新数组</p>\n<h5 id=\"object-difineProperty\"><a href=\"#object-difineProperty\" class=\"headerlink\" title=\"object.difineProperty\"></a>object.difineProperty</h5><p>第一个参数对象 ：目标（给哪个对象添加属性）</p>\n<p>第二个参数字符串 ：名字（属性名叫什么）</p>\n<p>第三个参数类型是对象：配置项 {enumerable:true；控制属性是否可枚举，默认值 false。writable:true;控制属性是否可修改，默认 false。configurable:true;控制属性可删除，默认 false。}</p>\n<p>数据代理案例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  b:<span class=\"string\">\"1\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"string\">\"2\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProprrty(a,<span class=\"string\">\"c\"</span>,&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(value)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"和-运算符\"><a href=\"#和-运算符\" class=\"headerlink\" title=\"?.和??运算符\"></a>?.和??运算符</h5><p>??和||类似但是不同的是逻辑或会在左侧为假值时返回右侧的操作符而？？只会在左侧为 null 和 undefined 时返回右侧</p>\n<p><code>?.</code>主要用于在多层的 object/array 进行取值和函数调用，一般如果左边的值为 undefined 和 null 时会报错，但是加上?.就不会报错了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b;</span><br><span class=\"line\">b?.map(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for-in-和-for-of\"><a href=\"#for-in-和-for-of\" class=\"headerlink\" title=\"for in 和 for of\"></a>for in 和 for of</h5><p>for in</p>\n<p>1.for in 更适合遍历对象，因为 for in 利用索引遍历，不能进行几何运算</p>\n<p>2.会遍历数组的所有可枚举值，包括原型</p>\n<p>for of</p>\n<p>1.for of 遍历的是数组元素值，而且只是数组内的元素，不包括原型</p>\n<p>2.for of 不能遍历对象，只能遍历有迭代器对象（iterator）的集合，如数组，字符串,map,set 等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for in</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a b c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//for of</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> array1) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a b c</span></span><br></pre></td></tr></table></figure>\n\n<p>hasOwnProperty()</p>\n<p>可以判断某属性是不是该对象的实例属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.hasOwnProperty(index)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = arr[index];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h5><p>这个函数会动态的生成一个匿名、全局唯一的值。</p>\n<p>symbol 的基本用处</p>\n<p>1.避免对象的键被覆盖</p>\n<p>2.避免魔术字符串</p>\n<h5 id=\"模糊搜索\"><a href=\"#模糊搜索\" class=\"headerlink\" title=\"模糊搜索\"></a>模糊搜索</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;vue计算属性写法</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\treturn this.list.filter(i&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\treturn i.name.indexof(this.inputValue) !&#x3D;&#x3D; -1</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;计算属性初始化就会执行一次，indexof（）这时候还没输入，所以indexof（&#39;&#39;）返回全部</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"indexof\"><a href=\"#indexof\" class=\"headerlink\" title=\"indexof()\"></a>indexof()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</span><br><span class=\"line\">stringObject.indexOf(searchvalue,fromindex)</span><br><span class=\"line\">fromindex 非必填 规定在字符串中开始检索的位置</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.filter() 三个参数 item index arr</span><br><span class=\"line\">1.创建一个新的数组</span><br><span class=\"line\">2.必须有返回值 return</span><br><span class=\"line\">3.和map不同的是符合条件返回true 否则false</span><br><span class=\"line\"></span><br><span class=\"line\">方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h5><p>Array.sort() 两个参数 a b</p>\n<p>1.改变原数据</p>\n<p>2.a-b 升序 b-a 降序</p>\n<p>3.写回调函数时要有返回值</p>\n<h5 id=\"Push\"><a href=\"#Push\" class=\"headerlink\" title=\"Push()\"></a>Push()</h5><p>往数组末尾加一个或多个元素 返回改变后数组的长度</p>\n<h5 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h5><p>方法可向数组的开头添加一个或更多元素，并返回新的长度 返回改变后数组的长度</p>\n<h5 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h5><p>方法向/从数组添加/删除项目，并返回删除的项目。</p>\n<p>三个参数</p>\n<p>第一个从什么地方添加或删除写 index，如果写负数就是从后面开始</p>\n<p>第二个 删除多少个 写 0 就是不删 或者不写也是不删</p>\n<p>第三个 需要添加到数组的新项目</p>\n<h5 id=\"Shift\"><a href=\"#Shift\" class=\"headerlink\" title=\"Shift()\"></a>Shift()</h5><p>删除数组中的第一个元素 改变原数组</p>\n<h5 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h5><p>方法用于颠倒数组中元素的顺序。</p>\n","site":{"data":{}},"excerpt":"<p>JavaScript 中常用的方法汇总</p>","more":"<h5 id=\"object-keys\"><a href=\"#object-keys\" class=\"headerlink\" title=\"object.keys\"></a>object.keys</h5><p>遍历对象的属性名返回一个新数组</p>\n<h5 id=\"object-difineProperty\"><a href=\"#object-difineProperty\" class=\"headerlink\" title=\"object.difineProperty\"></a>object.difineProperty</h5><p>第一个参数对象 ：目标（给哪个对象添加属性）</p>\n<p>第二个参数字符串 ：名字（属性名叫什么）</p>\n<p>第三个参数类型是对象：配置项 {enumerable:true；控制属性是否可枚举，默认值 false。writable:true;控制属性是否可修改，默认 false。configurable:true;控制属性可删除，默认 false。}</p>\n<p>数据代理案例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  b:<span class=\"string\">\"1\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"string\">\"2\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProprrty(a,<span class=\"string\">\"c\"</span>,&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(value)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"和-运算符\"><a href=\"#和-运算符\" class=\"headerlink\" title=\"?.和??运算符\"></a>?.和??运算符</h5><p>??和||类似但是不同的是逻辑或会在左侧为假值时返回右侧的操作符而？？只会在左侧为 null 和 undefined 时返回右侧</p>\n<p><code>?.</code>主要用于在多层的 object/array 进行取值和函数调用，一般如果左边的值为 undefined 和 null 时会报错，但是加上?.就不会报错了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b;</span><br><span class=\"line\">b?.map(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for-in-和-for-of\"><a href=\"#for-in-和-for-of\" class=\"headerlink\" title=\"for in 和 for of\"></a>for in 和 for of</h5><p>for in</p>\n<p>1.for in 更适合遍历对象，因为 for in 利用索引遍历，不能进行几何运算</p>\n<p>2.会遍历数组的所有可枚举值，包括原型</p>\n<p>for of</p>\n<p>1.for of 遍历的是数组元素值，而且只是数组内的元素，不包括原型</p>\n<p>2.for of 不能遍历对象，只能遍历有迭代器对象（iterator）的集合，如数组，字符串,map,set 等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for in</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a b c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//for of</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> array1) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a b c</span></span><br></pre></td></tr></table></figure>\n\n<p>hasOwnProperty()</p>\n<p>可以判断某属性是不是该对象的实例属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.hasOwnProperty(index)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = arr[index];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h5><p>这个函数会动态的生成一个匿名、全局唯一的值。</p>\n<p>symbol 的基本用处</p>\n<p>1.避免对象的键被覆盖</p>\n<p>2.避免魔术字符串</p>\n<h5 id=\"模糊搜索\"><a href=\"#模糊搜索\" class=\"headerlink\" title=\"模糊搜索\"></a>模糊搜索</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;vue计算属性写法</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\treturn this.list.filter(i&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\treturn i.name.indexof(this.inputValue) !&#x3D;&#x3D; -1</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;计算属性初始化就会执行一次，indexof（）这时候还没输入，所以indexof（&#39;&#39;）返回全部</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"indexof\"><a href=\"#indexof\" class=\"headerlink\" title=\"indexof()\"></a>indexof()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</span><br><span class=\"line\">stringObject.indexOf(searchvalue,fromindex)</span><br><span class=\"line\">fromindex 非必填 规定在字符串中开始检索的位置</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.filter() 三个参数 item index arr</span><br><span class=\"line\">1.创建一个新的数组</span><br><span class=\"line\">2.必须有返回值 return</span><br><span class=\"line\">3.和map不同的是符合条件返回true 否则false</span><br><span class=\"line\"></span><br><span class=\"line\">方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h5><p>Array.sort() 两个参数 a b</p>\n<p>1.改变原数据</p>\n<p>2.a-b 升序 b-a 降序</p>\n<p>3.写回调函数时要有返回值</p>\n<h5 id=\"Push\"><a href=\"#Push\" class=\"headerlink\" title=\"Push()\"></a>Push()</h5><p>往数组末尾加一个或多个元素 返回改变后数组的长度</p>\n<h5 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h5><p>方法可向数组的开头添加一个或更多元素，并返回新的长度 返回改变后数组的长度</p>\n<h5 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h5><p>方法向/从数组添加/删除项目，并返回删除的项目。</p>\n<p>三个参数</p>\n<p>第一个从什么地方添加或删除写 index，如果写负数就是从后面开始</p>\n<p>第二个 删除多少个 写 0 就是不删 或者不写也是不删</p>\n<p>第三个 需要添加到数组的新项目</p>\n<h5 id=\"Shift\"><a href=\"#Shift\" class=\"headerlink\" title=\"Shift()\"></a>Shift()</h5><p>删除数组中的第一个元素 改变原数组</p>\n<h5 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h5><p>方法用于颠倒数组中元素的顺序。</p>"},{"title":"VUE 2 & 3","date":"2021-11-26T09:57:04.859Z","modified":"2021-4-20 14.37","photos":["https://images.unsplash.com/photo-1501555088652-021faa106b9b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OXx8b3V0ZG9vcnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60"],"_content":"\nvue 复习\n\n<!--more-->\n\n##### MVVM\n\nVUE 参考了 mvvm 架构模型，m（模型 model）data 中的数据，v（视图 view）模版，vm（视图模型 viewmodel）vue 实例对象\n\n但是 vue 中添加了一个属性。ref\n通过 ref 可以拿到 dom 对象，通过 ref 直接去操作视图。这一点上，违背了 mvvm\n\n##### 数据代理\n\n![](../img/Snipaste_2021-11-16_23-33-59.png)\n\n这部分只做了数据代理，没有做数据劫持，也就是数据改变视图改变（响应式），其实\\_data 里面的属性 vue 有做数据劫持。\n\nVue2.x 是使用 Object.defindProperty()，来进行对对象的监听的，但是改变数组里的某个值不会触发 set，(如果要监听的到话，需要重新编写数组的方法)， 必须遍历每个对象的每个属性，如果对象嵌套很深的话，需要使用递归调用。\n\n##### 事件修饰符\n\n1.prevent:阻止默认事件（常用）\n\n2.stop：阻止时间冒泡（常用）\n\n3.once：事件只触发一次（常用）\n\n4.capture:使用事件的捕获模式\n\n5.self：只有 event.target 是当前操作元素才会触发事件\n\n6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕。（@scroll 滚动条事件用不到，@wheel 滚轮事件用到一般 c 端会用到）\n\nTips：可以使用链式写法@click.prevent.stop\n\n##### 键盘事件\n\n@keyup.enter=\"\"\n\n1.vue 常用的按键别名\n\n回车 enter\n\n删除 delete （退格和删除都能触发）\n\n退出 esc\n\n空格 space\n\n2.vue 为提供的按键，可以使用案件原始的 key 值去绑定，但注意转为短横线命名。\n\n3.系统修饰键用法比较特殊 最好配合 keydown 使用\n\n4.vue.config.keyCode.自定义键名 = 键码\n\nTips：可以使用链式写法@keyup.enter.y=\"\"意思是 enter 和 y 都要按才能触发\n\n##### 计算属性\n\n```js\n完整写法\ncomputed:{\n\tfullName:{\n\t\tget(){\n\t\t\treturn this.nameA+'-'this.nameB\n\t\t}\n\t\tset(value){\n\t\tconst arr = value.split('-')\n\t\tthis.nameA = arr[0]\n\t\tthis.nameB = arr[1]\n\t\t}\n\t}\n}\n简写（只用到get，用不到set的时候使用）\ncomputed:{\n\tfullName(){\n\t\treturn this.nameA+'-'this.nameB\n\t}\n}\n```\n\n##### 监视属性\n\n```js\ndata:{\n\tid:2,\n\tnumbers:{\n\t\ta:1,\n\t\tb:1\n\t}\n}\nwatch:{\n\tid:{\n\t\thandler(){\n\t\t\tconsole.log('a改变了')\n\t\t}\n\t}，\n\t//如果要监视多级结构中某个属性的变化可以这样写\n\t'numbers.a':{\n  \thandler(new,old){\n  \t\t\tconsole.log('a改变了')\n  \t}\n\t}，\n\t//监视多级结构所有属性的变化\n\tnumbers:{\n\t\timmediate:true,//初始化时让handler执行一次\n\t\tdeep:true,//深度监视\n\t\thandler(new,old){\n\t\tconsole.log('numbers改变了')\n\t\t}\n\t}\n}\n//简写（用不到deep，和immediate时使用）\nwatch:{\n\tid(new,old){\n\t\tconsole.log('id改变了')\n\t}\n}\n\nTips：\nvm.$watch('id',{\n\t\timmediate:true,//初始化时让handler执行一次\n\t\tdeep:true,//深度监视\n\t\thandler(n,o){\n\t\t}\n})\nvm.$watch('id',function(n,o){\nconsole.log('id改变了'，n,o)\n})\n```\n\n##### 计算属性和监听属性的区别\n\ncomputed 能完成的，watch 都能完成，watch 可以执行异步任务，computed 不行，computed 只有原始值发生变化，才会触发，具有缓存，watch 是数据改变就会触发。\n\nTips：所有被 vue 管理的函数嘴还写成普通函数，所有不被 vue 管理的函数最好写成箭头函数，这样 this 才是指向 vm 或组件实例对象。\n\n##### vue.set()\n\n##### 数据劫持\n\n```js\n//正常初始化data后，模版解析渲染页面，这个时候是响应式的，但是后面又想给data对象中追加数据，这个时候vue不做响应式，就像vue的bug。\n如果要给对象加属性，而且要响应式，要用\n1.vue.set(target,propertyName/index,value)或vm.$set(target,propertyName/index,value)\n2.但是vue.set和vm.$set不能给vm或vm根数据对象添加对象（Tips:不能给data直接添加属性 要再加一层结构）\n如果要修改数组中的某个元素一定要用如下方法不然不能响应式，可以使用这些vue包裹过的API push() shift() unshift() splice() sort() reverse()或者vm.$set() vue.set()\n```\n\n##### Es6\n\n``` js\n//形参默认值\ntest(a=\"1\"){\n\tconsole.log(a)\n}\ntest（）//1\ntest（2）//2\n```\n\n##### 管道符\n\n```js\n//和methods 同一层级的配置项\n常用在插值表达式中{{a | c}}\nmethods:{\n\n},\nfilter:{\n\tc(value){\n\t//value 会收到a\n\treturn a + 1\n\t}\n}\n```\n\n##### V-html\n\n向指定节点渲染包换 html 结构的内容\n\nv-html 可以识别 html 结构\n\nv-html 有安全性问题 不要在用户提交的内容上使用 容易导致 xxs 攻击\n\n##### v-clock\n\n直接写在标签里 <div v-clock/>\n\n使用 css 属性属性选择器[v-clock]{}可以解决因为网速满页面出现{{name}}情况\n\n当脚本跑起来时 vue 会删掉 v-clock 属性\n\n##### V-once\n\n只在初始化时解析一次 后面就视为静态内容 <div v-once/>\n\n##### 自定义指令\n\n```js\n1.v-自定义指令名\n\n2.写在配置项directives：{\n\n自定义指令名（element，binding）{\n\n\t\telement.innerText = binding.value * 10\n\n \t}\n\n}\n//如果需要处理一些逻辑时自定义指令写成对象形式\nfbind:{\n  //一上来调用，指令绑定时\n  bind(e,b){\n\n  },\n  //指令所在的元素被插入页面时\n  inserted(e,d){\n    //比如input获取焦点需要写在这里\n  },\n  //指令所在的模版被重新解析时\n   update(e,b){\n\n   }\n}\n\n3.初始化时调用一次，指令所在的模版被重新解析式调用。\n```\n","source":"_posts/vue2&3.md","raw":"title: VUE 2 & 3\ndate: 2021-4-20 14.37  \nmodified: 2021-4-20 14.37\ntag:\n\n- javascript\n\nphotos:\n\n- https://images.unsplash.com/photo-1501555088652-021faa106b9b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OXx8b3V0ZG9vcnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60\n\n---\n\nvue 复习\n\n<!--more-->\n\n##### MVVM\n\nVUE 参考了 mvvm 架构模型，m（模型 model）data 中的数据，v（视图 view）模版，vm（视图模型 viewmodel）vue 实例对象\n\n但是 vue 中添加了一个属性。ref\n通过 ref 可以拿到 dom 对象，通过 ref 直接去操作视图。这一点上，违背了 mvvm\n\n##### 数据代理\n\n![](../img/Snipaste_2021-11-16_23-33-59.png)\n\n这部分只做了数据代理，没有做数据劫持，也就是数据改变视图改变（响应式），其实\\_data 里面的属性 vue 有做数据劫持。\n\nVue2.x 是使用 Object.defindProperty()，来进行对对象的监听的，但是改变数组里的某个值不会触发 set，(如果要监听的到话，需要重新编写数组的方法)， 必须遍历每个对象的每个属性，如果对象嵌套很深的话，需要使用递归调用。\n\n##### 事件修饰符\n\n1.prevent:阻止默认事件（常用）\n\n2.stop：阻止时间冒泡（常用）\n\n3.once：事件只触发一次（常用）\n\n4.capture:使用事件的捕获模式\n\n5.self：只有 event.target 是当前操作元素才会触发事件\n\n6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕。（@scroll 滚动条事件用不到，@wheel 滚轮事件用到一般 c 端会用到）\n\nTips：可以使用链式写法@click.prevent.stop\n\n##### 键盘事件\n\n@keyup.enter=\"\"\n\n1.vue 常用的按键别名\n\n回车 enter\n\n删除 delete （退格和删除都能触发）\n\n退出 esc\n\n空格 space\n\n2.vue 为提供的按键，可以使用案件原始的 key 值去绑定，但注意转为短横线命名。\n\n3.系统修饰键用法比较特殊 最好配合 keydown 使用\n\n4.vue.config.keyCode.自定义键名 = 键码\n\nTips：可以使用链式写法@keyup.enter.y=\"\"意思是 enter 和 y 都要按才能触发\n\n##### 计算属性\n\n```js\n完整写法\ncomputed:{\n\tfullName:{\n\t\tget(){\n\t\t\treturn this.nameA+'-'this.nameB\n\t\t}\n\t\tset(value){\n\t\tconst arr = value.split('-')\n\t\tthis.nameA = arr[0]\n\t\tthis.nameB = arr[1]\n\t\t}\n\t}\n}\n简写（只用到get，用不到set的时候使用）\ncomputed:{\n\tfullName(){\n\t\treturn this.nameA+'-'this.nameB\n\t}\n}\n```\n\n##### 监视属性\n\n```js\ndata:{\n\tid:2,\n\tnumbers:{\n\t\ta:1,\n\t\tb:1\n\t}\n}\nwatch:{\n\tid:{\n\t\thandler(){\n\t\t\tconsole.log('a改变了')\n\t\t}\n\t}，\n\t//如果要监视多级结构中某个属性的变化可以这样写\n\t'numbers.a':{\n  \thandler(new,old){\n  \t\t\tconsole.log('a改变了')\n  \t}\n\t}，\n\t//监视多级结构所有属性的变化\n\tnumbers:{\n\t\timmediate:true,//初始化时让handler执行一次\n\t\tdeep:true,//深度监视\n\t\thandler(new,old){\n\t\tconsole.log('numbers改变了')\n\t\t}\n\t}\n}\n//简写（用不到deep，和immediate时使用）\nwatch:{\n\tid(new,old){\n\t\tconsole.log('id改变了')\n\t}\n}\n\nTips：\nvm.$watch('id',{\n\t\timmediate:true,//初始化时让handler执行一次\n\t\tdeep:true,//深度监视\n\t\thandler(n,o){\n\t\t}\n})\nvm.$watch('id',function(n,o){\nconsole.log('id改变了'，n,o)\n})\n```\n\n##### 计算属性和监听属性的区别\n\ncomputed 能完成的，watch 都能完成，watch 可以执行异步任务，computed 不行，computed 只有原始值发生变化，才会触发，具有缓存，watch 是数据改变就会触发。\n\nTips：所有被 vue 管理的函数嘴还写成普通函数，所有不被 vue 管理的函数最好写成箭头函数，这样 this 才是指向 vm 或组件实例对象。\n\n##### vue.set()\n\n##### 数据劫持\n\n```js\n//正常初始化data后，模版解析渲染页面，这个时候是响应式的，但是后面又想给data对象中追加数据，这个时候vue不做响应式，就像vue的bug。\n如果要给对象加属性，而且要响应式，要用\n1.vue.set(target,propertyName/index,value)或vm.$set(target,propertyName/index,value)\n2.但是vue.set和vm.$set不能给vm或vm根数据对象添加对象（Tips:不能给data直接添加属性 要再加一层结构）\n如果要修改数组中的某个元素一定要用如下方法不然不能响应式，可以使用这些vue包裹过的API push() shift() unshift() splice() sort() reverse()或者vm.$set() vue.set()\n```\n\n##### Es6\n\n``` js\n//形参默认值\ntest(a=\"1\"){\n\tconsole.log(a)\n}\ntest（）//1\ntest（2）//2\n```\n\n##### 管道符\n\n```js\n//和methods 同一层级的配置项\n常用在插值表达式中{{a | c}}\nmethods:{\n\n},\nfilter:{\n\tc(value){\n\t//value 会收到a\n\treturn a + 1\n\t}\n}\n```\n\n##### V-html\n\n向指定节点渲染包换 html 结构的内容\n\nv-html 可以识别 html 结构\n\nv-html 有安全性问题 不要在用户提交的内容上使用 容易导致 xxs 攻击\n\n##### v-clock\n\n直接写在标签里 <div v-clock/>\n\n使用 css 属性属性选择器[v-clock]{}可以解决因为网速满页面出现{{name}}情况\n\n当脚本跑起来时 vue 会删掉 v-clock 属性\n\n##### V-once\n\n只在初始化时解析一次 后面就视为静态内容 <div v-once/>\n\n##### 自定义指令\n\n```js\n1.v-自定义指令名\n\n2.写在配置项directives：{\n\n自定义指令名（element，binding）{\n\n\t\telement.innerText = binding.value * 10\n\n \t}\n\n}\n//如果需要处理一些逻辑时自定义指令写成对象形式\nfbind:{\n  //一上来调用，指令绑定时\n  bind(e,b){\n\n  },\n  //指令所在的元素被插入页面时\n  inserted(e,d){\n    //比如input获取焦点需要写在这里\n  },\n  //指令所在的模版被重新解析时\n   update(e,b){\n\n   }\n}\n\n3.初始化时调用一次，指令所在的模版被重新解析式调用。\n```\n","slug":"vue2&3","published":1,"updated":"2021-11-26T09:57:04.859Z","comments":1,"layout":"post","link":"","_id":"ckwn7vggw0003j3rca9cc311j","content":"<p>vue 复习</p>\n<a id=\"more\"></a>\n\n<h5 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h5><p>VUE 参考了 mvvm 架构模型，m（模型 model）data 中的数据，v（视图 view）模版，vm（视图模型 viewmodel）vue 实例对象</p>\n<p>但是 vue 中添加了一个属性。ref<br>通过 ref 可以拿到 dom 对象，通过 ref 直接去操作视图。这一点上，违背了 mvvm</p>\n<h5 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h5><p><img src=\"../img/Snipaste_2021-11-16_23-33-59.png\"></p>\n<p>这部分只做了数据代理，没有做数据劫持，也就是数据改变视图改变（响应式），其实_data 里面的属性 vue 有做数据劫持。</p>\n<p>Vue2.x 是使用 Object.defindProperty()，来进行对对象的监听的，但是改变数组里的某个值不会触发 set，(如果要监听的到话，需要重新编写数组的方法)， 必须遍历每个对象的每个属性，如果对象嵌套很深的话，需要使用递归调用。</p>\n<h5 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h5><p>1.prevent:阻止默认事件（常用）</p>\n<p>2.stop：阻止时间冒泡（常用）</p>\n<p>3.once：事件只触发一次（常用）</p>\n<p>4.capture:使用事件的捕获模式</p>\n<p>5.self：只有 event.target 是当前操作元素才会触发事件</p>\n<p>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕。（@scroll 滚动条事件用不到，@wheel 滚轮事件用到一般 c 端会用到）</p>\n<p>Tips：可以使用链式写法@click.prevent.stop</p>\n<h5 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h5><p>@keyup.enter=””</p>\n<p>1.vue 常用的按键别名</p>\n<p>回车 enter</p>\n<p>删除 delete （退格和删除都能触发）</p>\n<p>退出 esc</p>\n<p>空格 space</p>\n<p>2.vue 为提供的按键，可以使用案件原始的 key 值去绑定，但注意转为短横线命名。</p>\n<p>3.系统修饰键用法比较特殊 最好配合 keydown 使用</p>\n<p>4.vue.config.keyCode.自定义键名 = 键码</p>\n<p>Tips：可以使用链式写法@keyup.enter.y=””意思是 enter 和 y 都要按才能触发</p>\n<h5 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">完整写法</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tfullName:&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nameA+<span class=\"string\">'-'</span><span class=\"keyword\">this</span>.nameB</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span>(value)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> arr = value.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.nameA = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.nameB = arr[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">简写（只用到<span class=\"keyword\">get</span>，用不到<span class=\"keyword\">set</span>的时候使用）</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tfullName()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nameA+<span class=\"string\">'-'</span><span class=\"keyword\">this</span>.nameB</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"监视属性\"><a href=\"#监视属性\" class=\"headerlink\" title=\"监视属性\"></a>监视属性</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:&#123;</span><br><span class=\"line\">\tid:<span class=\"number\">2</span>,</span><br><span class=\"line\">\tnumbers:&#123;</span><br><span class=\"line\">\t\ta:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tb:<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">\tid:&#123;</span><br><span class=\"line\">\t\thandler()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a改变了'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\t<span class=\"comment\">//如果要监视多级结构中某个属性的变化可以这样写</span></span><br><span class=\"line\">\t<span class=\"string\">'numbers.a'</span>:&#123;</span><br><span class=\"line\">  \thandler(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">  \t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a改变了'</span>)</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\t<span class=\"comment\">//监视多级结构所有属性的变化</span></span><br><span class=\"line\">\tnumbers:&#123;</span><br><span class=\"line\">\t\timmediate:<span class=\"literal\">true</span>,<span class=\"comment\">//初始化时让handler执行一次</span></span><br><span class=\"line\">\t\tdeep:<span class=\"literal\">true</span>,<span class=\"comment\">//深度监视</span></span><br><span class=\"line\">\t\thandler(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'numbers改变了'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//简写（用不到deep，和immediate时使用）</span></span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">\tid(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'id改变了'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Tips：</span><br><span class=\"line\">vm.$watch(<span class=\"string\">'id'</span>,&#123;</span><br><span class=\"line\">\t\timmediate:<span class=\"literal\">true</span>,<span class=\"comment\">//初始化时让handler执行一次</span></span><br><span class=\"line\">\t\tdeep:<span class=\"literal\">true</span>,<span class=\"comment\">//深度监视</span></span><br><span class=\"line\">\t\thandler(n,o)&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.$watch(<span class=\"string\">'id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n,o</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'id改变了'</span>，n,o)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"计算属性和监听属性的区别\"><a href=\"#计算属性和监听属性的区别\" class=\"headerlink\" title=\"计算属性和监听属性的区别\"></a>计算属性和监听属性的区别</h5><p>computed 能完成的，watch 都能完成，watch 可以执行异步任务，computed 不行，computed 只有原始值发生变化，才会触发，具有缓存，watch 是数据改变就会触发。</p>\n<p>Tips：所有被 vue 管理的函数嘴还写成普通函数，所有不被 vue 管理的函数最好写成箭头函数，这样 this 才是指向 vm 或组件实例对象。</p>\n<h5 id=\"vue-set\"><a href=\"#vue-set\" class=\"headerlink\" title=\"vue.set()\"></a>vue.set()</h5><h5 id=\"数据劫持\"><a href=\"#数据劫持\" class=\"headerlink\" title=\"数据劫持\"></a>数据劫持</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正常初始化data后，模版解析渲染页面，这个时候是响应式的，但是后面又想给data对象中追加数据，这个时候vue不做响应式，就像vue的bug。</span></span><br><span class=\"line\">如果要给对象加属性，而且要响应式，要用</span><br><span class=\"line\"><span class=\"number\">1.</span>vue.set(target,propertyName/index,value)或vm.$<span class=\"keyword\">set</span>(target,propertyName/index,value)</span><br><span class=\"line\">2.但是vue.<span class=\"keyword\">set</span>和vm.$<span class=\"keyword\">set</span>不能给vm或vm根数据对象添加对象（Tips:不能给data直接添加属性 要再加一层结构）</span><br><span class=\"line\">如果要修改数组中的某个元素一定要用如下方法不然不能响应式，可以使用这些vue包裹过的API push() shift() unshift() splice() sort() reverse()或者vm.$<span class=\"keyword\">set</span>() vue.<span class=\"keyword\">set</span>()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Es6\"><a href=\"#Es6\" class=\"headerlink\" title=\"Es6\"></a>Es6</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形参默认值</span></span><br><span class=\"line\">test(a=<span class=\"string\">\"1\"</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test（）<span class=\"comment\">//1</span></span><br><span class=\"line\">test（<span class=\"number\">2</span>）<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"管道符\"><a href=\"#管道符\" class=\"headerlink\" title=\"管道符\"></a>管道符</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//和methods 同一层级的配置项</span></span><br><span class=\"line\">常用在插值表达式中&#123;&#123;a | c&#125;&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">filter:&#123;</span><br><span class=\"line\">\tc(value)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//value 会收到a</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"V-html\"><a href=\"#V-html\" class=\"headerlink\" title=\"V-html\"></a>V-html</h5><p>向指定节点渲染包换 html 结构的内容</p>\n<p>v-html 可以识别 html 结构</p>\n<p>v-html 有安全性问题 不要在用户提交的内容上使用 容易导致 xxs 攻击</p>\n<h5 id=\"v-clock\"><a href=\"#v-clock\" class=\"headerlink\" title=\"v-clock\"></a>v-clock</h5><p>直接写在标签里 <div v-clock/></p>\n<p>使用 css 属性属性选择器[v-clock]{}可以解决因为网速满页面出现情况</p>\n<p>当脚本跑起来时 vue 会删掉 v-clock 属性</p>\n<h5 id=\"V-once\"><a href=\"#V-once\" class=\"headerlink\" title=\"V-once\"></a>V-once</h5><p>只在初始化时解析一次 后面就视为静态内容 <div v-once/></p>\n<h5 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>v-自定义指令名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>写在配置项directives：&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">自定义指令名（element，binding）&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\telement.innerText = binding.value * <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果需要处理一些逻辑时自定义指令写成对象形式</span></span><br><span class=\"line\">fbind:&#123;</span><br><span class=\"line\">  <span class=\"comment\">//一上来调用，指令绑定时</span></span><br><span class=\"line\">  bind(e,b)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//指令所在的元素被插入页面时</span></span><br><span class=\"line\">  inserted(e,d)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//比如input获取焦点需要写在这里</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//指令所在的模版被重新解析时</span></span><br><span class=\"line\">   update(e,b)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>初始化时调用一次，指令所在的模版被重新解析式调用。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>vue 复习</p>","more":"<h5 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h5><p>VUE 参考了 mvvm 架构模型，m（模型 model）data 中的数据，v（视图 view）模版，vm（视图模型 viewmodel）vue 实例对象</p>\n<p>但是 vue 中添加了一个属性。ref<br>通过 ref 可以拿到 dom 对象，通过 ref 直接去操作视图。这一点上，违背了 mvvm</p>\n<h5 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h5><p><img src=\"../img/Snipaste_2021-11-16_23-33-59.png\"></p>\n<p>这部分只做了数据代理，没有做数据劫持，也就是数据改变视图改变（响应式），其实_data 里面的属性 vue 有做数据劫持。</p>\n<p>Vue2.x 是使用 Object.defindProperty()，来进行对对象的监听的，但是改变数组里的某个值不会触发 set，(如果要监听的到话，需要重新编写数组的方法)， 必须遍历每个对象的每个属性，如果对象嵌套很深的话，需要使用递归调用。</p>\n<h5 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h5><p>1.prevent:阻止默认事件（常用）</p>\n<p>2.stop：阻止时间冒泡（常用）</p>\n<p>3.once：事件只触发一次（常用）</p>\n<p>4.capture:使用事件的捕获模式</p>\n<p>5.self：只有 event.target 是当前操作元素才会触发事件</p>\n<p>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕。（@scroll 滚动条事件用不到，@wheel 滚轮事件用到一般 c 端会用到）</p>\n<p>Tips：可以使用链式写法@click.prevent.stop</p>\n<h5 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h5><p>@keyup.enter=””</p>\n<p>1.vue 常用的按键别名</p>\n<p>回车 enter</p>\n<p>删除 delete （退格和删除都能触发）</p>\n<p>退出 esc</p>\n<p>空格 space</p>\n<p>2.vue 为提供的按键，可以使用案件原始的 key 值去绑定，但注意转为短横线命名。</p>\n<p>3.系统修饰键用法比较特殊 最好配合 keydown 使用</p>\n<p>4.vue.config.keyCode.自定义键名 = 键码</p>\n<p>Tips：可以使用链式写法@keyup.enter.y=””意思是 enter 和 y 都要按才能触发</p>\n<h5 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">完整写法</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tfullName:&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nameA+<span class=\"string\">'-'</span><span class=\"keyword\">this</span>.nameB</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span>(value)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> arr = value.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.nameA = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.nameB = arr[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">简写（只用到<span class=\"keyword\">get</span>，用不到<span class=\"keyword\">set</span>的时候使用）</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tfullName()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nameA+<span class=\"string\">'-'</span><span class=\"keyword\">this</span>.nameB</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"监视属性\"><a href=\"#监视属性\" class=\"headerlink\" title=\"监视属性\"></a>监视属性</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:&#123;</span><br><span class=\"line\">\tid:<span class=\"number\">2</span>,</span><br><span class=\"line\">\tnumbers:&#123;</span><br><span class=\"line\">\t\ta:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tb:<span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">\tid:&#123;</span><br><span class=\"line\">\t\thandler()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a改变了'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\t<span class=\"comment\">//如果要监视多级结构中某个属性的变化可以这样写</span></span><br><span class=\"line\">\t<span class=\"string\">'numbers.a'</span>:&#123;</span><br><span class=\"line\">  \thandler(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">  \t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a改变了'</span>)</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\t<span class=\"comment\">//监视多级结构所有属性的变化</span></span><br><span class=\"line\">\tnumbers:&#123;</span><br><span class=\"line\">\t\timmediate:<span class=\"literal\">true</span>,<span class=\"comment\">//初始化时让handler执行一次</span></span><br><span class=\"line\">\t\tdeep:<span class=\"literal\">true</span>,<span class=\"comment\">//深度监视</span></span><br><span class=\"line\">\t\thandler(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'numbers改变了'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//简写（用不到deep，和immediate时使用）</span></span><br><span class=\"line\">watch:&#123;</span><br><span class=\"line\">\tid(<span class=\"keyword\">new</span>,old)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'id改变了'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Tips：</span><br><span class=\"line\">vm.$watch(<span class=\"string\">'id'</span>,&#123;</span><br><span class=\"line\">\t\timmediate:<span class=\"literal\">true</span>,<span class=\"comment\">//初始化时让handler执行一次</span></span><br><span class=\"line\">\t\tdeep:<span class=\"literal\">true</span>,<span class=\"comment\">//深度监视</span></span><br><span class=\"line\">\t\thandler(n,o)&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.$watch(<span class=\"string\">'id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n,o</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'id改变了'</span>，n,o)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"计算属性和监听属性的区别\"><a href=\"#计算属性和监听属性的区别\" class=\"headerlink\" title=\"计算属性和监听属性的区别\"></a>计算属性和监听属性的区别</h5><p>computed 能完成的，watch 都能完成，watch 可以执行异步任务，computed 不行，computed 只有原始值发生变化，才会触发，具有缓存，watch 是数据改变就会触发。</p>\n<p>Tips：所有被 vue 管理的函数嘴还写成普通函数，所有不被 vue 管理的函数最好写成箭头函数，这样 this 才是指向 vm 或组件实例对象。</p>\n<h5 id=\"vue-set\"><a href=\"#vue-set\" class=\"headerlink\" title=\"vue.set()\"></a>vue.set()</h5><h5 id=\"数据劫持\"><a href=\"#数据劫持\" class=\"headerlink\" title=\"数据劫持\"></a>数据劫持</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正常初始化data后，模版解析渲染页面，这个时候是响应式的，但是后面又想给data对象中追加数据，这个时候vue不做响应式，就像vue的bug。</span></span><br><span class=\"line\">如果要给对象加属性，而且要响应式，要用</span><br><span class=\"line\"><span class=\"number\">1.</span>vue.set(target,propertyName/index,value)或vm.$<span class=\"keyword\">set</span>(target,propertyName/index,value)</span><br><span class=\"line\">2.但是vue.<span class=\"keyword\">set</span>和vm.$<span class=\"keyword\">set</span>不能给vm或vm根数据对象添加对象（Tips:不能给data直接添加属性 要再加一层结构）</span><br><span class=\"line\">如果要修改数组中的某个元素一定要用如下方法不然不能响应式，可以使用这些vue包裹过的API push() shift() unshift() splice() sort() reverse()或者vm.$<span class=\"keyword\">set</span>() vue.<span class=\"keyword\">set</span>()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Es6\"><a href=\"#Es6\" class=\"headerlink\" title=\"Es6\"></a>Es6</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形参默认值</span></span><br><span class=\"line\">test(a=<span class=\"string\">\"1\"</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test（）<span class=\"comment\">//1</span></span><br><span class=\"line\">test（<span class=\"number\">2</span>）<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"管道符\"><a href=\"#管道符\" class=\"headerlink\" title=\"管道符\"></a>管道符</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//和methods 同一层级的配置项</span></span><br><span class=\"line\">常用在插值表达式中&#123;&#123;a | c&#125;&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">filter:&#123;</span><br><span class=\"line\">\tc(value)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//value 会收到a</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"V-html\"><a href=\"#V-html\" class=\"headerlink\" title=\"V-html\"></a>V-html</h5><p>向指定节点渲染包换 html 结构的内容</p>\n<p>v-html 可以识别 html 结构</p>\n<p>v-html 有安全性问题 不要在用户提交的内容上使用 容易导致 xxs 攻击</p>\n<h5 id=\"v-clock\"><a href=\"#v-clock\" class=\"headerlink\" title=\"v-clock\"></a>v-clock</h5><p>直接写在标签里 <div v-clock/></p>\n<p>使用 css 属性属性选择器[v-clock]{}可以解决因为网速满页面出现情况</p>\n<p>当脚本跑起来时 vue 会删掉 v-clock 属性</p>\n<h5 id=\"V-once\"><a href=\"#V-once\" class=\"headerlink\" title=\"V-once\"></a>V-once</h5><p>只在初始化时解析一次 后面就视为静态内容 <div v-once/></p>\n<h5 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>v-自定义指令名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>写在配置项directives：&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">自定义指令名（element，binding）&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\telement.innerText = binding.value * <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果需要处理一些逻辑时自定义指令写成对象形式</span></span><br><span class=\"line\">fbind:&#123;</span><br><span class=\"line\">  <span class=\"comment\">//一上来调用，指令绑定时</span></span><br><span class=\"line\">  bind(e,b)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//指令所在的元素被插入页面时</span></span><br><span class=\"line\">  inserted(e,d)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//比如input获取焦点需要写在这里</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//指令所在的模版被重新解析时</span></span><br><span class=\"line\">   update(e,b)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>初始化时调用一次，指令所在的模版被重新解析式调用。</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckwn7vggq0000j3rc0dkx7b3i","tag_id":"ckwn7vggs0001j3rcb7ec8urj","_id":"ckwn7vggt0002j3rcd6q54uwt"},{"post_id":"ckwn7vggw0003j3rca9cc311j","tag_id":"ckwn7vggs0001j3rcb7ec8urj","_id":"ckwn7vggw0004j3rcgm4s80ut"}],"Tag":[{"name":"javascript","_id":"ckwn7vggs0001j3rcb7ec8urj"}]}}